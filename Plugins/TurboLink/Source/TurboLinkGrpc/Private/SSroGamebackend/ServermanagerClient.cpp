//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGamebackend/ServermanagerClient.h"
#include "SSroGamebackend/ServermanagerService.h"
#include "ServermanagerContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UServerManagerServiceClient::InitCreateDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_CreateDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::CreateDimension(FGrpcContextHandle Handle, const FGrpcSroGamebackendCreateDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextCreateDimension = StaticCastSharedPtr<GrpcContext_ServerManagerService_CreateDimension>(*context);
		contextCreateDimension->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitDuplicateDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_DuplicateDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::DuplicateDimension(FGrpcContextHandle Handle, const FGrpcSroGamebackendDuplicateDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextDuplicateDimension = StaticCastSharedPtr<GrpcContext_ServerManagerService_DuplicateDimension>(*context);
		contextDuplicateDimension->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitGetDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_GetDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::GetDimension(FGrpcContextHandle Handle, const FGrpcSroGamebackendDimensionTarget& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetDimension = StaticCastSharedPtr<GrpcContext_ServerManagerService_GetDimension>(*context);
		contextGetDimension->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitGetAllDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_GetAllDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::GetAllDimension(FGrpcContextHandle Handle, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetAllDimension = StaticCastSharedPtr<GrpcContext_ServerManagerService_GetAllDimension>(*context);
		contextGetAllDimension->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitEditDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_EditDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::EditDimension(FGrpcContextHandle Handle, const FGrpcSroGamebackendEditDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextEditDimension = StaticCastSharedPtr<GrpcContext_ServerManagerService_EditDimension>(*context);
		contextEditDimension->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitDeleteDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_DeleteDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::DeleteDimension(FGrpcContextHandle Handle, const FGrpcSroGamebackendDimensionTarget& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextDeleteDimension = StaticCastSharedPtr<GrpcContext_ServerManagerService_DeleteDimension>(*context);
		contextDeleteDimension->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitCreateMap()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_CreateMap>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::CreateMap(FGrpcContextHandle Handle, const FGrpcSroGamebackendCreateMapRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextCreateMap = StaticCastSharedPtr<GrpcContext_ServerManagerService_CreateMap>(*context);
		contextCreateMap->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitGetMap()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_GetMap>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::GetMap(FGrpcContextHandle Handle, const FGrpcSroGamebackendMapTarget& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetMap = StaticCastSharedPtr<GrpcContext_ServerManagerService_GetMap>(*context);
		contextGetMap->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitGetAllMaps()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_GetAllMaps>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::GetAllMaps(FGrpcContextHandle Handle, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetAllMaps = StaticCastSharedPtr<GrpcContext_ServerManagerService_GetAllMaps>(*context);
		contextGetAllMaps->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitEditMap()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_EditMap>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::EditMap(FGrpcContextHandle Handle, const FGrpcSroGamebackendEditMapRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextEditMap = StaticCastSharedPtr<GrpcContext_ServerManagerService_EditMap>(*context);
		contextEditMap->Call(Request);
	}
}

FGrpcContextHandle UServerManagerServiceClient::InitDeleteMap()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ServerManagerService_DeleteMap>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UServerManagerServiceClient::DeleteMap(FGrpcContextHandle Handle, const FGrpcSroGamebackendMapTarget& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextDeleteMap = StaticCastSharedPtr<GrpcContext_ServerManagerService_DeleteMap>(*context);
		contextDeleteMap->Call(Request);
	}
}

void UServerManagerServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UServerManagerServiceClient::Shutdown()
{
	OnCreateDimensionResponse.Clear();
	OnDuplicateDimensionResponse.Clear();
	OnGetDimensionResponse.Clear();
	OnGetAllDimensionResponse.Clear();
	OnEditDimensionResponse.Clear();
	OnDeleteDimensionResponse.Clear();
	OnCreateMapResponse.Clear();
	OnGetMapResponse.Clear();
	OnGetAllMapsResponse.Clear();
	OnEditMapResponse.Clear();
	OnDeleteMapResponse.Clear();
	Super::Shutdown();
}

