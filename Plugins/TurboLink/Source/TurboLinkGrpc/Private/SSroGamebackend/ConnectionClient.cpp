//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGamebackend/ConnectionClient.h"
#include "SSroGamebackend/ConnectionService.h"
#include "ConnectionContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UConnectionServiceClient::InitConnectGameServer()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ConnectionService_ConnectGameServer>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UConnectionServiceClient::ConnectGameServer(FGrpcContextHandle Handle, const FGrpcSroCharacterCharacterTarget& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextConnectGameServer = StaticCastSharedPtr<GrpcContext_ConnectionService_ConnectGameServer>(*context);
		contextConnectGameServer->Call(Request);
	}
}

FGrpcContextHandle UConnectionServiceClient::InitVerifyConnect()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ConnectionService_VerifyConnect>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UConnectionServiceClient::VerifyConnect(FGrpcContextHandle Handle, const FGrpcSroGamebackendVerifyConnectRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextVerifyConnect = StaticCastSharedPtr<GrpcContext_ConnectionService_VerifyConnect>(*context);
		contextVerifyConnect->Call(Request);
	}
}

FGrpcContextHandle UConnectionServiceClient::InitTransferPlayer()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ConnectionService_TransferPlayer>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UConnectionServiceClient::TransferPlayer(FGrpcContextHandle Handle, const FGrpcSroGamebackendTransferPlayerRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextTransferPlayer = StaticCastSharedPtr<GrpcContext_ConnectionService_TransferPlayer>(*context);
		contextTransferPlayer->Call(Request);
	}
}

FGrpcContextHandle UConnectionServiceClient::InitIsPlaying()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ConnectionService_IsPlaying>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UConnectionServiceClient::IsPlaying(FGrpcContextHandle Handle, const FGrpcSroCharacterCharacterTarget& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextIsPlaying = StaticCastSharedPtr<GrpcContext_ConnectionService_IsPlaying>(*context);
		contextIsPlaying->Call(Request);
	}
}

void UConnectionServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UConnectionServiceClient::Shutdown()
{
	OnConnectGameServerResponse.Clear();
	OnVerifyConnectResponse.Clear();
	OnTransferPlayerResponse.Clear();
	OnIsPlayingResponse.Clear();
	Super::Shutdown();
}

