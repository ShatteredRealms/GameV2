//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGamebackend/ServermanagerMessage.h"

FGrpcSroGamebackendDimensionTargetFindBy UGrpcSroGamebackendDimensionTargetFindByHelperLibrary::MakeFindBy(EGrpcSroGamebackendDimensionTargetFindBy FindByCase, 
    FString Id, FString Name 
)
{
    FGrpcSroGamebackendDimensionTargetFindBy FindBy;
    FindBy.FindByCase = FindByCase;
    FindBy.Id = Id;
    FindBy.Name = Name;

    return FindBy;
}

void UGrpcSroGamebackendDimensionTargetFindByHelperLibrary::BreakFindBy(const FGrpcSroGamebackendDimensionTargetFindBy& FindBy, EGrpcSroGamebackendDimensionTargetFindBy& FindByCase, 
    FString& Id, FString& Name 
)
{
    FindByCase = FindBy.FindByCase;
    Id = FindBy.Id;
    Name = FindBy.Name;
}

FGrpcSroGamebackendMapTargetFindBy UGrpcSroGamebackendMapTargetFindByHelperLibrary::MakeFindBy(EGrpcSroGamebackendMapTargetFindBy FindByCase, 
    FString Id, FString Name 
)
{
    FGrpcSroGamebackendMapTargetFindBy FindBy;
    FindBy.FindByCase = FindByCase;
    FindBy.Id = Id;
    FindBy.Name = Name;

    return FindBy;
}

void UGrpcSroGamebackendMapTargetFindByHelperLibrary::BreakFindBy(const FGrpcSroGamebackendMapTargetFindBy& FindBy, EGrpcSroGamebackendMapTargetFindBy& FindByCase, 
    FString& Id, FString& Name 
)
{
    FindByCase = FindBy.FindByCase;
    Id = FindBy.Id;
    Name = FindBy.Name;
}

FGrpcSroGamebackendEditDimensionRequestOptional_name UGrpcSroGamebackendEditDimensionRequestOptional_nameHelperLibrary::MakeOptional_name(EGrpcSroGamebackendEditDimensionRequestOptional_name Optional_nameCase, 
    FString Name 
)
{
    FGrpcSroGamebackendEditDimensionRequestOptional_name Optional_name;
    Optional_name.Optional_nameCase = Optional_nameCase;
    Optional_name.Name = Name;

    return Optional_name;
}

void UGrpcSroGamebackendEditDimensionRequestOptional_nameHelperLibrary::BreakOptional_name(const FGrpcSroGamebackendEditDimensionRequestOptional_name& Optional_name, EGrpcSroGamebackendEditDimensionRequestOptional_name& Optional_nameCase, 
    FString& Name 
)
{
    Optional_nameCase = Optional_name.Optional_nameCase;
    Name = Optional_name.Name;
}

FGrpcSroGamebackendEditDimensionRequestOptional_version UGrpcSroGamebackendEditDimensionRequestOptional_versionHelperLibrary::MakeOptional_version(EGrpcSroGamebackendEditDimensionRequestOptional_version Optional_versionCase, 
    FString Version 
)
{
    FGrpcSroGamebackendEditDimensionRequestOptional_version Optional_version;
    Optional_version.Optional_versionCase = Optional_versionCase;
    Optional_version.Version = Version;

    return Optional_version;
}

void UGrpcSroGamebackendEditDimensionRequestOptional_versionHelperLibrary::BreakOptional_version(const FGrpcSroGamebackendEditDimensionRequestOptional_version& Optional_version, EGrpcSroGamebackendEditDimensionRequestOptional_version& Optional_versionCase, 
    FString& Version 
)
{
    Optional_versionCase = Optional_version.Optional_versionCase;
    Version = Optional_version.Version;
}

FGrpcSroGamebackendEditDimensionRequestOptional_location UGrpcSroGamebackendEditDimensionRequestOptional_locationHelperLibrary::MakeOptional_location(EGrpcSroGamebackendEditDimensionRequestOptional_location Optional_locationCase, 
    FString Location 
)
{
    FGrpcSroGamebackendEditDimensionRequestOptional_location Optional_location;
    Optional_location.Optional_locationCase = Optional_locationCase;
    Optional_location.Location = Location;

    return Optional_location;
}

void UGrpcSroGamebackendEditDimensionRequestOptional_locationHelperLibrary::BreakOptional_location(const FGrpcSroGamebackendEditDimensionRequestOptional_location& Optional_location, EGrpcSroGamebackendEditDimensionRequestOptional_location& Optional_locationCase, 
    FString& Location 
)
{
    Optional_locationCase = Optional_location.Optional_locationCase;
    Location = Optional_location.Location;
}

FGrpcSroGamebackendDimension UGrpcSroGamebackendDimensionHelperLibrary::MakeDimension( 
    FString Id, FString Name, FString Version, 
    TArray<FGrpcSroGamebackendMap> Maps, FString Location 
)
{
    FGrpcSroGamebackendDimension Dimension;
    Dimension.Id = Id;
    Dimension.Name = Name;
    Dimension.Version = Version;
    for (const auto& element : Maps)
    {
        Dimension.Maps.Add(MakeShareable(new FGrpcSroGamebackendMap(element)));
    }
    Dimension.Location = Location;

    return Dimension;
}

void UGrpcSroGamebackendDimensionHelperLibrary::BreakDimension(const FGrpcSroGamebackendDimension& Dimension,  
    FString& Id, FString& Name, FString& Version, 
    TArray<FGrpcSroGamebackendMap>& Maps, FString& Location 
)
{
    Id = Dimension.Id;
    Name = Dimension.Name;
    Version = Dimension.Version;
    for (auto& element : Dimension.Maps)
    {
        Maps.Add(*(element.Get()));
    }
    Location = Dimension.Location;
}

FGrpcSroGamebackendEditMapRequestOptional_name UGrpcSroGamebackendEditMapRequestOptional_nameHelperLibrary::MakeOptional_name(EGrpcSroGamebackendEditMapRequestOptional_name Optional_nameCase, 
    FString Name 
)
{
    FGrpcSroGamebackendEditMapRequestOptional_name Optional_name;
    Optional_name.Optional_nameCase = Optional_nameCase;
    Optional_name.Name = Name;

    return Optional_name;
}

void UGrpcSroGamebackendEditMapRequestOptional_nameHelperLibrary::BreakOptional_name(const FGrpcSroGamebackendEditMapRequestOptional_name& Optional_name, EGrpcSroGamebackendEditMapRequestOptional_name& Optional_nameCase, 
    FString& Name 
)
{
    Optional_nameCase = Optional_name.Optional_nameCase;
    Name = Optional_name.Name;
}

FGrpcSroGamebackendEditMapRequestOptional_path UGrpcSroGamebackendEditMapRequestOptional_pathHelperLibrary::MakeOptional_path(EGrpcSroGamebackendEditMapRequestOptional_path Optional_pathCase, 
    FString Path 
)
{
    FGrpcSroGamebackendEditMapRequestOptional_path Optional_path;
    Optional_path.Optional_pathCase = Optional_pathCase;
    Optional_path.Path = Path;

    return Optional_path;
}

void UGrpcSroGamebackendEditMapRequestOptional_pathHelperLibrary::BreakOptional_path(const FGrpcSroGamebackendEditMapRequestOptional_path& Optional_path, EGrpcSroGamebackendEditMapRequestOptional_path& Optional_pathCase, 
    FString& Path 
)
{
    Optional_pathCase = Optional_path.Optional_pathCase;
    Path = Optional_path.Path;
}

FGrpcSroGamebackendEditMapRequestOptional_max_players UGrpcSroGamebackendEditMapRequestOptional_max_playersHelperLibrary::MakeOptional_max_players(EGrpcSroGamebackendEditMapRequestOptional_max_players Optional_max_playersCase, 
    FUInt64 MaxPlayers 
)
{
    FGrpcSroGamebackendEditMapRequestOptional_max_players Optional_max_players;
    Optional_max_players.Optional_max_playersCase = Optional_max_playersCase;
    Optional_max_players.MaxPlayers = MaxPlayers;

    return Optional_max_players;
}

void UGrpcSroGamebackendEditMapRequestOptional_max_playersHelperLibrary::BreakOptional_max_players(const FGrpcSroGamebackendEditMapRequestOptional_max_players& Optional_max_players, EGrpcSroGamebackendEditMapRequestOptional_max_players& Optional_max_playersCase, 
    FUInt64& MaxPlayers 
)
{
    Optional_max_playersCase = Optional_max_players.Optional_max_playersCase;
    MaxPlayers = Optional_max_players.MaxPlayers;
}

FGrpcSroGamebackendEditMapRequestOptional_instanced UGrpcSroGamebackendEditMapRequestOptional_instancedHelperLibrary::MakeOptional_instanced(EGrpcSroGamebackendEditMapRequestOptional_instanced Optional_instancedCase, 
    bool Instanced 
)
{
    FGrpcSroGamebackendEditMapRequestOptional_instanced Optional_instanced;
    Optional_instanced.Optional_instancedCase = Optional_instancedCase;
    Optional_instanced.Instanced = Instanced;

    return Optional_instanced;
}

void UGrpcSroGamebackendEditMapRequestOptional_instancedHelperLibrary::BreakOptional_instanced(const FGrpcSroGamebackendEditMapRequestOptional_instanced& Optional_instanced, EGrpcSroGamebackendEditMapRequestOptional_instanced& Optional_instancedCase, 
    bool& Instanced 
)
{
    Optional_instancedCase = Optional_instanced.Optional_instancedCase;
    Instanced = Optional_instanced.Instanced;
}

