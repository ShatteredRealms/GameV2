//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGamebackend/ServermanagerNode.h"
#include "SSroGamebackend/ServermanagerService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallServerManagerServiceCreateDimension* UCallServerManagerServiceCreateDimension::CreateDimension(UObject* WorldContextObject, const FGrpcSroGamebackendCreateDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceCreateDimension* node = NewObject<UCallServerManagerServiceCreateDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceCreateDimension::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceCreateDimension::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceCreateDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGamebackendDimension response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceCreateDimension::OnContextStateChange);
		ServerManagerServiceClient->OnCreateDimensionResponse.AddUniqueDynamic(this, &UCallServerManagerServiceCreateDimension::OnResponse);

		Context = ServerManagerServiceClient->InitCreateDimension();
		ServerManagerServiceClient->CreateDimension(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceCreateDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceCreateDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGamebackendDimension& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCreateDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceCreateDimension::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceCreateDimension::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceDuplicateDimension* UCallServerManagerServiceDuplicateDimension::DuplicateDimension(UObject* WorldContextObject, const FGrpcSroGamebackendDuplicateDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceDuplicateDimension* node = NewObject<UCallServerManagerServiceDuplicateDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceDuplicateDimension::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceDuplicateDimension::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceDuplicateDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGamebackendDimension response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceDuplicateDimension::OnContextStateChange);
		ServerManagerServiceClient->OnDuplicateDimensionResponse.AddUniqueDynamic(this, &UCallServerManagerServiceDuplicateDimension::OnResponse);

		Context = ServerManagerServiceClient->InitDuplicateDimension();
		ServerManagerServiceClient->DuplicateDimension(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceDuplicateDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceDuplicateDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGamebackendDimension& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDuplicateDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceDuplicateDimension::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceDuplicateDimension::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceGetDimension* UCallServerManagerServiceGetDimension::GetDimension(UObject* WorldContextObject, const FGrpcSroGamebackendDimensionTarget& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceGetDimension* node = NewObject<UCallServerManagerServiceGetDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceGetDimension::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceGetDimension::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceGetDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGamebackendDimension response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceGetDimension::OnContextStateChange);
		ServerManagerServiceClient->OnGetDimensionResponse.AddUniqueDynamic(this, &UCallServerManagerServiceGetDimension::OnResponse);

		Context = ServerManagerServiceClient->InitGetDimension();
		ServerManagerServiceClient->GetDimension(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceGetDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceGetDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGamebackendDimension& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceGetDimension::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceGetDimension::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceGetAllDimension* UCallServerManagerServiceGetAllDimension::GetAllDimension(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceGetAllDimension* node = NewObject<UCallServerManagerServiceGetAllDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceGetAllDimension::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceGetAllDimension::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceGetAllDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGamebackendDimensions response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceGetAllDimension::OnContextStateChange);
		ServerManagerServiceClient->OnGetAllDimensionResponse.AddUniqueDynamic(this, &UCallServerManagerServiceGetAllDimension::OnResponse);

		Context = ServerManagerServiceClient->InitGetAllDimension();
		ServerManagerServiceClient->GetAllDimension(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceGetAllDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceGetAllDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGamebackendDimensions& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetAllDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceGetAllDimension::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceGetAllDimension::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceEditDimension* UCallServerManagerServiceEditDimension::EditDimension(UObject* WorldContextObject, const FGrpcSroGamebackendEditDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceEditDimension* node = NewObject<UCallServerManagerServiceEditDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceEditDimension::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceEditDimension::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceEditDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGamebackendDimension response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceEditDimension::OnContextStateChange);
		ServerManagerServiceClient->OnEditDimensionResponse.AddUniqueDynamic(this, &UCallServerManagerServiceEditDimension::OnResponse);

		Context = ServerManagerServiceClient->InitEditDimension();
		ServerManagerServiceClient->EditDimension(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceEditDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceEditDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGamebackendDimension& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnEditDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceEditDimension::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceEditDimension::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceDeleteDimension* UCallServerManagerServiceDeleteDimension::DeleteDimension(UObject* WorldContextObject, const FGrpcSroGamebackendDimensionTarget& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceDeleteDimension* node = NewObject<UCallServerManagerServiceDeleteDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceDeleteDimension::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceDeleteDimension::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceDeleteDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceDeleteDimension::OnContextStateChange);
		ServerManagerServiceClient->OnDeleteDimensionResponse.AddUniqueDynamic(this, &UCallServerManagerServiceDeleteDimension::OnResponse);

		Context = ServerManagerServiceClient->InitDeleteDimension();
		ServerManagerServiceClient->DeleteDimension(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceDeleteDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceDeleteDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDeleteDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceDeleteDimension::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceDeleteDimension::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceCreateMap* UCallServerManagerServiceCreateMap::CreateMap(UObject* WorldContextObject, const FGrpcSroGamebackendCreateMapRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceCreateMap* node = NewObject<UCallServerManagerServiceCreateMap>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceCreateMap::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceCreateMap::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceCreateMap::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGamebackendMap response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceCreateMap::OnContextStateChange);
		ServerManagerServiceClient->OnCreateMapResponse.AddUniqueDynamic(this, &UCallServerManagerServiceCreateMap::OnResponse);

		Context = ServerManagerServiceClient->InitCreateMap();
		ServerManagerServiceClient->CreateMap(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceCreateMap::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceCreateMap::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGamebackendMap& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCreateMapResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceCreateMap::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceCreateMap::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceGetMap* UCallServerManagerServiceGetMap::GetMap(UObject* WorldContextObject, const FGrpcSroGamebackendMapTarget& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceGetMap* node = NewObject<UCallServerManagerServiceGetMap>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceGetMap::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceGetMap::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceGetMap::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGamebackendMap response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceGetMap::OnContextStateChange);
		ServerManagerServiceClient->OnGetMapResponse.AddUniqueDynamic(this, &UCallServerManagerServiceGetMap::OnResponse);

		Context = ServerManagerServiceClient->InitGetMap();
		ServerManagerServiceClient->GetMap(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceGetMap::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceGetMap::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGamebackendMap& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetMapResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceGetMap::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceGetMap::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceGetAllMaps* UCallServerManagerServiceGetAllMaps::GetAllMaps(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceGetAllMaps* node = NewObject<UCallServerManagerServiceGetAllMaps>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceGetAllMaps::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceGetAllMaps::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceGetAllMaps::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGamebackendMaps response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceGetAllMaps::OnContextStateChange);
		ServerManagerServiceClient->OnGetAllMapsResponse.AddUniqueDynamic(this, &UCallServerManagerServiceGetAllMaps::OnResponse);

		Context = ServerManagerServiceClient->InitGetAllMaps();
		ServerManagerServiceClient->GetAllMaps(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceGetAllMaps::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceGetAllMaps::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGamebackendMaps& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetAllMapsResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceGetAllMaps::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceGetAllMaps::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceEditMap* UCallServerManagerServiceEditMap::EditMap(UObject* WorldContextObject, const FGrpcSroGamebackendEditMapRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceEditMap* node = NewObject<UCallServerManagerServiceEditMap>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceEditMap::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceEditMap::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceEditMap::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGamebackendMap response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceEditMap::OnContextStateChange);
		ServerManagerServiceClient->OnEditMapResponse.AddUniqueDynamic(this, &UCallServerManagerServiceEditMap::OnResponse);

		Context = ServerManagerServiceClient->InitEditMap();
		ServerManagerServiceClient->EditMap(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceEditMap::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceEditMap::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGamebackendMap& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnEditMapResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceEditMap::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceEditMap::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallServerManagerServiceDeleteMap* UCallServerManagerServiceDeleteMap::DeleteMap(UObject* WorldContextObject, const FGrpcSroGamebackendMapTarget& Request, TMap<FString, FString>& MetaData)
{
	UCallServerManagerServiceDeleteMap* node = NewObject<UCallServerManagerServiceDeleteMap>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ServerManagerService = Cast<UServerManagerService>(turboLinkManager->MakeService("ServerManagerService"));
	if (node->ServerManagerService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ServerManagerService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallServerManagerServiceDeleteMap::OnServiceStateChanged);
	return node;
}

void UCallServerManagerServiceDeleteMap::Activate()
{
	ServerManagerService->Connect();
}

void UCallServerManagerServiceDeleteMap::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ServerManagerServiceClient = ServerManagerService->MakeClient();
		ServerManagerServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallServerManagerServiceDeleteMap::OnContextStateChange);
		ServerManagerServiceClient->OnDeleteMapResponse.AddUniqueDynamic(this, &UCallServerManagerServiceDeleteMap::OnResponse);

		Context = ServerManagerServiceClient->InitDeleteMap();
		ServerManagerServiceClient->DeleteMap(Context, Request, MetaData);
	}
}

void UCallServerManagerServiceDeleteMap::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallServerManagerServiceDeleteMap::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDeleteMapResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallServerManagerServiceDeleteMap::Shutdown()
{
	ServerManagerService->OnServiceStateChanged.RemoveDynamic(this, &UCallServerManagerServiceDeleteMap::OnServiceStateChanged);
	if (ServerManagerServiceClient != nullptr)
	{
		ServerManagerService->RemoveClient(ServerManagerServiceClient);
		ServerManagerServiceClient->Shutdown();
		ServerManagerServiceClient = nullptr;
	}

	if (ServerManagerService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ServerManagerService);
		ServerManagerService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
