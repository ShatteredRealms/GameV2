//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGamebackend/ServermanagerService.h"
#include "SSroGamebackend/ServermanagerClient.h"
#include "ServermanagerService_Private.h"
#include "ServermanagerMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UServerManagerService::UServerManagerService()
	: d(new UServerManagerService::Private())
{
}

UServerManagerService::~UServerManagerService()
{
	delete d;
}

void UServerManagerService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("ServerManagerService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to ServerManagerService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::gamebackend::ServerManagerService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UServerManagerService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UServerManagerServiceClient* UServerManagerService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UServerManagerServiceClient>();
	return client;
}

void UServerManagerService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UServerManagerService::CallCreateDimension(const FGrpcSroGamebackendCreateDimensionRequest& Request, FCreateDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceCreateDimensionLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceCreateDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCreateDimension();
	InnerClient->OnCreateDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceCreateDimensionLambdaWrapper::OnResponse);
	InnerClient->CreateDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallDuplicateDimension(const FGrpcSroGamebackendDuplicateDimensionRequest& Request, FDuplicateDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceDuplicateDimensionLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceDuplicateDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDuplicateDimension();
	InnerClient->OnDuplicateDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceDuplicateDimensionLambdaWrapper::OnResponse);
	InnerClient->DuplicateDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallGetDimension(const FGrpcSroGamebackendDimensionTarget& Request, FGetDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceGetDimensionLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceGetDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetDimension();
	InnerClient->OnGetDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceGetDimensionLambdaWrapper::OnResponse);
	InnerClient->GetDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallGetAllDimension(const FGrpcGoogleProtobufEmpty& Request, FGetAllDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceGetAllDimensionLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceGetAllDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetAllDimension();
	InnerClient->OnGetAllDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceGetAllDimensionLambdaWrapper::OnResponse);
	InnerClient->GetAllDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallEditDimension(const FGrpcSroGamebackendEditDimensionRequest& Request, FEditDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceEditDimensionLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceEditDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitEditDimension();
	InnerClient->OnEditDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceEditDimensionLambdaWrapper::OnResponse);
	InnerClient->EditDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallDeleteDimension(const FGrpcSroGamebackendDimensionTarget& Request, FDeleteDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceDeleteDimensionLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceDeleteDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDeleteDimension();
	InnerClient->OnDeleteDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceDeleteDimensionLambdaWrapper::OnResponse);
	InnerClient->DeleteDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallCreateMap(const FGrpcSroGamebackendCreateMapRequest& Request, FCreateMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceCreateMapLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceCreateMapLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCreateMap();
	InnerClient->OnCreateMapResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceCreateMapLambdaWrapper::OnResponse);
	InnerClient->CreateMap(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallGetMap(const FGrpcSroGamebackendMapTarget& Request, FGetMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceGetMapLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceGetMapLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetMap();
	InnerClient->OnGetMapResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceGetMapLambdaWrapper::OnResponse);
	InnerClient->GetMap(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallGetAllMaps(const FGrpcGoogleProtobufEmpty& Request, FGetAllMapsResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceGetAllMapsLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceGetAllMapsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetAllMaps();
	InnerClient->OnGetAllMapsResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceGetAllMapsLambdaWrapper::OnResponse);
	InnerClient->GetAllMaps(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallEditMap(const FGrpcSroGamebackendEditMapRequest& Request, FEditMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceEditMapLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceEditMapLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitEditMap();
	InnerClient->OnEditMapResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceEditMapLambdaWrapper::OnResponse);
	InnerClient->EditMap(lambdaWrapper->Handle, Request, MetaData);
}

void UServerManagerService::CallDeleteMap(const FGrpcSroGamebackendMapTarget& Request, FDeleteMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UServerManagerServiceDeleteMapLambdaWrapper* lambdaWrapper = NewObject<UServerManagerServiceDeleteMapLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDeleteMap();
	InnerClient->OnDeleteMapResponse.AddUniqueDynamic(lambdaWrapper, &UServerManagerServiceDeleteMapLambdaWrapper::OnResponse);
	InnerClient->DeleteMap(lambdaWrapper->Handle, Request, MetaData);
}
