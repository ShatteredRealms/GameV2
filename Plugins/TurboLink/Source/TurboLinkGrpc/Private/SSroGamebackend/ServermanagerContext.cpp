//Generated by TurboLink CodeGenerator, do not edit!
#include "ServermanagerContext.h"
#include "SSroGamebackend/ServermanagerClient.h"
#include "ServermanagerService_Private.h"
#include "ServermanagerMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_ServerManagerService_CreateDimension::GrpcContext_ServerManagerService_CreateDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_CreateDimension::Call(const FGrpcSroGamebackendCreateDimensionRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gamebackend::CreateDimensionRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_CreateDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gamebackend::Dimension* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnCreateDimensionResponse.IsBound())) return;

			FGrpcSroGamebackendDimension response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCreateDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_DuplicateDimension::GrpcContext_ServerManagerService_DuplicateDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_DuplicateDimension::Call(const FGrpcSroGamebackendDuplicateDimensionRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gamebackend::DuplicateDimensionRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDuplicateDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_DuplicateDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gamebackend::Dimension* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnDuplicateDimensionResponse.IsBound())) return;

			FGrpcSroGamebackendDimension response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDuplicateDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_GetDimension::GrpcContext_ServerManagerService_GetDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_GetDimension::Call(const FGrpcSroGamebackendDimensionTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gamebackend::DimensionTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_GetDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gamebackend::Dimension* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnGetDimensionResponse.IsBound())) return;

			FGrpcSroGamebackendDimension response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_GetAllDimension::GrpcContext_ServerManagerService_GetAllDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_GetAllDimension::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetAllDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_GetAllDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gamebackend::Dimensions* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnGetAllDimensionResponse.IsBound())) return;

			FGrpcSroGamebackendDimensions response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetAllDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_EditDimension::GrpcContext_ServerManagerService_EditDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_EditDimension::Call(const FGrpcSroGamebackendEditDimensionRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gamebackend::EditDimensionRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncEditDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_EditDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gamebackend::Dimension* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnEditDimensionResponse.IsBound())) return;

			FGrpcSroGamebackendDimension response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnEditDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_DeleteDimension::GrpcContext_ServerManagerService_DeleteDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_DeleteDimension::Call(const FGrpcSroGamebackendDimensionTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gamebackend::DimensionTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDeleteDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_DeleteDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnDeleteDimensionResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDeleteDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_CreateMap::GrpcContext_ServerManagerService_CreateMap(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_CreateMap::Call(const FGrpcSroGamebackendCreateMapRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gamebackend::CreateMapRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateMap(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_CreateMap::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gamebackend::Map* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnCreateMapResponse.IsBound())) return;

			FGrpcSroGamebackendMap response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCreateMapResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_GetMap::GrpcContext_ServerManagerService_GetMap(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_GetMap::Call(const FGrpcSroGamebackendMapTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gamebackend::MapTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetMap(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_GetMap::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gamebackend::Map* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnGetMapResponse.IsBound())) return;

			FGrpcSroGamebackendMap response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetMapResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_GetAllMaps::GrpcContext_ServerManagerService_GetAllMaps(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_GetAllMaps::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetAllMaps(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_GetAllMaps::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gamebackend::Maps* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnGetAllMapsResponse.IsBound())) return;

			FGrpcSroGamebackendMaps response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetAllMapsResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_EditMap::GrpcContext_ServerManagerService_EditMap(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_EditMap::Call(const FGrpcSroGamebackendEditMapRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gamebackend::EditMapRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncEditMap(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_EditMap::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gamebackend::Map* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnEditMapResponse.IsBound())) return;

			FGrpcSroGamebackendMap response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnEditMapResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ServerManagerService_DeleteMap::GrpcContext_ServerManagerService_DeleteMap(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ServerManagerService_DeleteMap::Call(const FGrpcSroGamebackendMapTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gamebackend::MapTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UServerManagerService* service = (UServerManagerService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDeleteMap(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ServerManagerService_DeleteMap::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UServerManagerServiceClient* client = (UServerManagerServiceClient*)(this->Client);
			if (!(client->OnDeleteMapResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDeleteMapResponse.Broadcast(Handle, _Result, response);
		}
	);
}
