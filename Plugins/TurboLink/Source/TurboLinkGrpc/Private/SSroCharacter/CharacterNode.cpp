//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroCharacter/CharacterNode.h"
#include "SSroCharacter/CharacterService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallCharacterServiceGetCharacters* UCallCharacterServiceGetCharacters::GetCharacters(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	UCallCharacterServiceGetCharacters* node = NewObject<UCallCharacterServiceGetCharacters>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharacterService = Cast<UCharacterService>(turboLinkManager->MakeService("CharacterService"));
	if (node->CharacterService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->CharacterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharacterServiceGetCharacters::OnServiceStateChanged);
	return node;
}

void UCallCharacterServiceGetCharacters::Activate()
{
	CharacterService->Connect();
}

void UCallCharacterServiceGetCharacters::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharacterCharactersDetails response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharacterServiceClient = CharacterService->MakeClient();
		CharacterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharacterServiceGetCharacters::OnContextStateChange);
		CharacterServiceClient->OnGetCharactersResponse.AddUniqueDynamic(this, &UCallCharacterServiceGetCharacters::OnResponse);

		Context = CharacterServiceClient->InitGetCharacters();
		CharacterServiceClient->GetCharacters(Context, Request, MetaData);
	}
}

void UCallCharacterServiceGetCharacters::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharacterServiceGetCharacters::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharacterCharactersDetails& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetCharactersResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharacterServiceGetCharacters::Shutdown()
{
	CharacterService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharacterServiceGetCharacters::OnServiceStateChanged);
	if (CharacterServiceClient != nullptr)
	{
		CharacterService->RemoveClient(CharacterServiceClient);
		CharacterServiceClient->Shutdown();
		CharacterServiceClient = nullptr;
	}

	if (CharacterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharacterService);
		CharacterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharacterServiceGetCharacter* UCallCharacterServiceGetCharacter::GetCharacter(UObject* WorldContextObject, const FGrpcSroCharacterCharacterTarget& Request, TMap<FString, FString>& MetaData)
{
	UCallCharacterServiceGetCharacter* node = NewObject<UCallCharacterServiceGetCharacter>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharacterService = Cast<UCharacterService>(turboLinkManager->MakeService("CharacterService"));
	if (node->CharacterService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->CharacterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharacterServiceGetCharacter::OnServiceStateChanged);
	return node;
}

void UCallCharacterServiceGetCharacter::Activate()
{
	CharacterService->Connect();
}

void UCallCharacterServiceGetCharacter::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharacterCharacterDetails response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharacterServiceClient = CharacterService->MakeClient();
		CharacterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharacterServiceGetCharacter::OnContextStateChange);
		CharacterServiceClient->OnGetCharacterResponse.AddUniqueDynamic(this, &UCallCharacterServiceGetCharacter::OnResponse);

		Context = CharacterServiceClient->InitGetCharacter();
		CharacterServiceClient->GetCharacter(Context, Request, MetaData);
	}
}

void UCallCharacterServiceGetCharacter::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharacterServiceGetCharacter::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharacterCharacterDetails& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetCharacterResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharacterServiceGetCharacter::Shutdown()
{
	CharacterService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharacterServiceGetCharacter::OnServiceStateChanged);
	if (CharacterServiceClient != nullptr)
	{
		CharacterService->RemoveClient(CharacterServiceClient);
		CharacterServiceClient->Shutdown();
		CharacterServiceClient = nullptr;
	}

	if (CharacterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharacterService);
		CharacterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharacterServiceCreateCharacter* UCallCharacterServiceCreateCharacter::CreateCharacter(UObject* WorldContextObject, const FGrpcSroCharacterCreateCharacterRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallCharacterServiceCreateCharacter* node = NewObject<UCallCharacterServiceCreateCharacter>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharacterService = Cast<UCharacterService>(turboLinkManager->MakeService("CharacterService"));
	if (node->CharacterService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->CharacterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharacterServiceCreateCharacter::OnServiceStateChanged);
	return node;
}

void UCallCharacterServiceCreateCharacter::Activate()
{
	CharacterService->Connect();
}

void UCallCharacterServiceCreateCharacter::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharacterCharacterDetails response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharacterServiceClient = CharacterService->MakeClient();
		CharacterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharacterServiceCreateCharacter::OnContextStateChange);
		CharacterServiceClient->OnCreateCharacterResponse.AddUniqueDynamic(this, &UCallCharacterServiceCreateCharacter::OnResponse);

		Context = CharacterServiceClient->InitCreateCharacter();
		CharacterServiceClient->CreateCharacter(Context, Request, MetaData);
	}
}

void UCallCharacterServiceCreateCharacter::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharacterServiceCreateCharacter::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharacterCharacterDetails& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCreateCharacterResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharacterServiceCreateCharacter::Shutdown()
{
	CharacterService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharacterServiceCreateCharacter::OnServiceStateChanged);
	if (CharacterServiceClient != nullptr)
	{
		CharacterService->RemoveClient(CharacterServiceClient);
		CharacterServiceClient->Shutdown();
		CharacterServiceClient = nullptr;
	}

	if (CharacterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharacterService);
		CharacterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharacterServiceDeleteCharacter* UCallCharacterServiceDeleteCharacter::DeleteCharacter(UObject* WorldContextObject, const FGrpcSroCharacterCharacterTarget& Request, TMap<FString, FString>& MetaData)
{
	UCallCharacterServiceDeleteCharacter* node = NewObject<UCallCharacterServiceDeleteCharacter>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharacterService = Cast<UCharacterService>(turboLinkManager->MakeService("CharacterService"));
	if (node->CharacterService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->CharacterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharacterServiceDeleteCharacter::OnServiceStateChanged);
	return node;
}

void UCallCharacterServiceDeleteCharacter::Activate()
{
	CharacterService->Connect();
}

void UCallCharacterServiceDeleteCharacter::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharacterServiceClient = CharacterService->MakeClient();
		CharacterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharacterServiceDeleteCharacter::OnContextStateChange);
		CharacterServiceClient->OnDeleteCharacterResponse.AddUniqueDynamic(this, &UCallCharacterServiceDeleteCharacter::OnResponse);

		Context = CharacterServiceClient->InitDeleteCharacter();
		CharacterServiceClient->DeleteCharacter(Context, Request, MetaData);
	}
}

void UCallCharacterServiceDeleteCharacter::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharacterServiceDeleteCharacter::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDeleteCharacterResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharacterServiceDeleteCharacter::Shutdown()
{
	CharacterService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharacterServiceDeleteCharacter::OnServiceStateChanged);
	if (CharacterServiceClient != nullptr)
	{
		CharacterService->RemoveClient(CharacterServiceClient);
		CharacterServiceClient->Shutdown();
		CharacterServiceClient = nullptr;
	}

	if (CharacterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharacterService);
		CharacterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharacterServiceGetAllCharactersForUser* UCallCharacterServiceGetAllCharactersForUser::GetAllCharactersForUser(UObject* WorldContextObject, const FGrpcSroUserTarget& Request, TMap<FString, FString>& MetaData)
{
	UCallCharacterServiceGetAllCharactersForUser* node = NewObject<UCallCharacterServiceGetAllCharactersForUser>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharacterService = Cast<UCharacterService>(turboLinkManager->MakeService("CharacterService"));
	if (node->CharacterService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->CharacterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharacterServiceGetAllCharactersForUser::OnServiceStateChanged);
	return node;
}

void UCallCharacterServiceGetAllCharactersForUser::Activate()
{
	CharacterService->Connect();
}

void UCallCharacterServiceGetAllCharactersForUser::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharacterCharactersDetails response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharacterServiceClient = CharacterService->MakeClient();
		CharacterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharacterServiceGetAllCharactersForUser::OnContextStateChange);
		CharacterServiceClient->OnGetAllCharactersForUserResponse.AddUniqueDynamic(this, &UCallCharacterServiceGetAllCharactersForUser::OnResponse);

		Context = CharacterServiceClient->InitGetAllCharactersForUser();
		CharacterServiceClient->GetAllCharactersForUser(Context, Request, MetaData);
	}
}

void UCallCharacterServiceGetAllCharactersForUser::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharacterServiceGetAllCharactersForUser::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharacterCharactersDetails& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetAllCharactersForUserResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharacterServiceGetAllCharactersForUser::Shutdown()
{
	CharacterService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharacterServiceGetAllCharactersForUser::OnServiceStateChanged);
	if (CharacterServiceClient != nullptr)
	{
		CharacterService->RemoveClient(CharacterServiceClient);
		CharacterServiceClient->Shutdown();
		CharacterServiceClient = nullptr;
	}

	if (CharacterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharacterService);
		CharacterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharacterServiceEditCharacter* UCallCharacterServiceEditCharacter::EditCharacter(UObject* WorldContextObject, const FGrpcSroCharacterEditCharacterRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallCharacterServiceEditCharacter* node = NewObject<UCallCharacterServiceEditCharacter>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharacterService = Cast<UCharacterService>(turboLinkManager->MakeService("CharacterService"));
	if (node->CharacterService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->CharacterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharacterServiceEditCharacter::OnServiceStateChanged);
	return node;
}

void UCallCharacterServiceEditCharacter::Activate()
{
	CharacterService->Connect();
}

void UCallCharacterServiceEditCharacter::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharacterServiceClient = CharacterService->MakeClient();
		CharacterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharacterServiceEditCharacter::OnContextStateChange);
		CharacterServiceClient->OnEditCharacterResponse.AddUniqueDynamic(this, &UCallCharacterServiceEditCharacter::OnResponse);

		Context = CharacterServiceClient->InitEditCharacter();
		CharacterServiceClient->EditCharacter(Context, Request, MetaData);
	}
}

void UCallCharacterServiceEditCharacter::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharacterServiceEditCharacter::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnEditCharacterResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharacterServiceEditCharacter::Shutdown()
{
	CharacterService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharacterServiceEditCharacter::OnServiceStateChanged);
	if (CharacterServiceClient != nullptr)
	{
		CharacterService->RemoveClient(CharacterServiceClient);
		CharacterServiceClient->Shutdown();
		CharacterServiceClient = nullptr;
	}

	if (CharacterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharacterService);
		CharacterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharacterServiceAddCharacterPlayTime* UCallCharacterServiceAddCharacterPlayTime::AddCharacterPlayTime(UObject* WorldContextObject, const FGrpcSroCharacterAddPlayTimeRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallCharacterServiceAddCharacterPlayTime* node = NewObject<UCallCharacterServiceAddCharacterPlayTime>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharacterService = Cast<UCharacterService>(turboLinkManager->MakeService("CharacterService"));
	if (node->CharacterService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->CharacterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharacterServiceAddCharacterPlayTime::OnServiceStateChanged);
	return node;
}

void UCallCharacterServiceAddCharacterPlayTime::Activate()
{
	CharacterService->Connect();
}

void UCallCharacterServiceAddCharacterPlayTime::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharacterPlayTimeResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharacterServiceClient = CharacterService->MakeClient();
		CharacterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharacterServiceAddCharacterPlayTime::OnContextStateChange);
		CharacterServiceClient->OnAddCharacterPlayTimeResponse.AddUniqueDynamic(this, &UCallCharacterServiceAddCharacterPlayTime::OnResponse);

		Context = CharacterServiceClient->InitAddCharacterPlayTime();
		CharacterServiceClient->AddCharacterPlayTime(Context, Request, MetaData);
	}
}

void UCallCharacterServiceAddCharacterPlayTime::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharacterServiceAddCharacterPlayTime::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharacterPlayTimeResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnAddCharacterPlayTimeResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharacterServiceAddCharacterPlayTime::Shutdown()
{
	CharacterService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharacterServiceAddCharacterPlayTime::OnServiceStateChanged);
	if (CharacterServiceClient != nullptr)
	{
		CharacterService->RemoveClient(CharacterServiceClient);
		CharacterServiceClient->Shutdown();
		CharacterServiceClient = nullptr;
	}

	if (CharacterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharacterService);
		CharacterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharacterServiceGetInventory* UCallCharacterServiceGetInventory::GetInventory(UObject* WorldContextObject, const FGrpcSroCharacterCharacterTarget& Request, TMap<FString, FString>& MetaData)
{
	UCallCharacterServiceGetInventory* node = NewObject<UCallCharacterServiceGetInventory>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharacterService = Cast<UCharacterService>(turboLinkManager->MakeService("CharacterService"));
	if (node->CharacterService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->CharacterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharacterServiceGetInventory::OnServiceStateChanged);
	return node;
}

void UCallCharacterServiceGetInventory::Activate()
{
	CharacterService->Connect();
}

void UCallCharacterServiceGetInventory::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharacterInventory response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharacterServiceClient = CharacterService->MakeClient();
		CharacterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharacterServiceGetInventory::OnContextStateChange);
		CharacterServiceClient->OnGetInventoryResponse.AddUniqueDynamic(this, &UCallCharacterServiceGetInventory::OnResponse);

		Context = CharacterServiceClient->InitGetInventory();
		CharacterServiceClient->GetInventory(Context, Request, MetaData);
	}
}

void UCallCharacterServiceGetInventory::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharacterServiceGetInventory::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharacterInventory& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetInventoryResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharacterServiceGetInventory::Shutdown()
{
	CharacterService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharacterServiceGetInventory::OnServiceStateChanged);
	if (CharacterServiceClient != nullptr)
	{
		CharacterService->RemoveClient(CharacterServiceClient);
		CharacterServiceClient->Shutdown();
		CharacterServiceClient = nullptr;
	}

	if (CharacterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharacterService);
		CharacterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallCharacterServiceSetInventory* UCallCharacterServiceSetInventory::SetInventory(UObject* WorldContextObject, const FGrpcSroCharacterUpdateInventoryRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallCharacterServiceSetInventory* node = NewObject<UCallCharacterServiceSetInventory>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->CharacterService = Cast<UCharacterService>(turboLinkManager->MakeService("CharacterService"));
	if (node->CharacterService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->CharacterService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallCharacterServiceSetInventory::OnServiceStateChanged);
	return node;
}

void UCallCharacterServiceSetInventory::Activate()
{
	CharacterService->Connect();
}

void UCallCharacterServiceSetInventory::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		CharacterServiceClient = CharacterService->MakeClient();
		CharacterServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallCharacterServiceSetInventory::OnContextStateChange);
		CharacterServiceClient->OnSetInventoryResponse.AddUniqueDynamic(this, &UCallCharacterServiceSetInventory::OnResponse);

		Context = CharacterServiceClient->InitSetInventory();
		CharacterServiceClient->SetInventory(Context, Request, MetaData);
	}
}

void UCallCharacterServiceSetInventory::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallCharacterServiceSetInventory::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSetInventoryResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallCharacterServiceSetInventory::Shutdown()
{
	CharacterService->OnServiceStateChanged.RemoveDynamic(this, &UCallCharacterServiceSetInventory::OnServiceStateChanged);
	if (CharacterServiceClient != nullptr)
	{
		CharacterService->RemoveClient(CharacterServiceClient);
		CharacterServiceClient->Shutdown();
		CharacterServiceClient = nullptr;
	}

	if (CharacterService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(CharacterService);
		CharacterService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
