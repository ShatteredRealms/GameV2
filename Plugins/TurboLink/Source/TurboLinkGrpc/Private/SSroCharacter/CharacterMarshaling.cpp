//Generated by TurboLink CodeGenerator, do not edit!
#include "CharacterMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "SSroGamebackend/ServermanagerMarshaling.h"

void GRPC_TO_TURBOLINK(const ::sro::character::PlayTimeResponse* in, FGrpcSroCharacterPlayTimeResponse* out)
{
    out->Time=in->time();
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterPlayTimeResponse* in, ::sro::character::PlayTimeResponse* out)
{
    out->set_time(in->Time);
}

void GRPC_TO_TURBOLINK(const ::sro::character::AddPlayTimeRequest* in, FGrpcSroCharacterAddPlayTimeRequest* out)
{
    {
        FGrpcSroCharacterCharacterTarget field;
        GRPC_TO_TURBOLINK(&(in->character()), &field);
        out->Character = MakeShareable(new FGrpcSroCharacterCharacterTarget(field));
    }
    out->Time=in->time();
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterAddPlayTimeRequest* in, ::sro::character::AddPlayTimeRequest* out)
{
    TURBOLINK_TO_GRPC(in->Character.Get(), out->mutable_character());
    out->set_time(in->Time);
}

void GRPC_TO_TURBOLINK(const ::sro::character::CreateCharacterRequest* in, FGrpcSroCharacterCreateCharacterRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->owner()), &(out->Owner));
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Gender=UTF8_TO_TCHAR(in->gender().c_str());
    out->Realm=UTF8_TO_TCHAR(in->realm().c_str());
    GRPC_TO_TURBOLINK(&(in->dimension()), &(out->Dimension));
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterCreateCharacterRequest* in, ::sro::character::CreateCharacterRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Owner), out->mutable_owner());
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_gender(TCHAR_TO_UTF8(*(in->Gender)));
    out->set_realm(TCHAR_TO_UTF8(*(in->Realm)));
    TURBOLINK_TO_GRPC(&(in->Dimension), out->mutable_dimension());
}

void GRPC_TO_TURBOLINK(const ::sro::character::CharacterTarget* in, FGrpcSroCharacterCharacterTarget* out)
{
    switch(in->type_case())
    {
    case ::sro::character::CharacterTarget::kId:
        out->Type.Id=in->id();
        out->Type.TypeCase = EGrpcSroCharacterCharacterTargetType::Id;
        break;
    case ::sro::character::CharacterTarget::kName:
        out->Type.Name=UTF8_TO_TCHAR(in->name().c_str());
        out->Type.TypeCase = EGrpcSroCharacterCharacterTargetType::Name;
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterCharacterTarget* in, ::sro::character::CharacterTarget* out)
{
    switch (in->Type.TypeCase)
    {
    case EGrpcSroCharacterCharacterTargetType::Id:
        out->set_id(in->Type.Id);
        break;
    case EGrpcSroCharacterCharacterTargetType::Name:
        out->set_name(TCHAR_TO_UTF8(*(in->Type.Name)));
        break;
    }
}

void GRPC_TO_TURBOLINK(const ::sro::character::EditCharacterRequest* in, FGrpcSroCharacterEditCharacterRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->target()), &(out->Target));
    switch(in->optional_owner_id_case())
    {
    case ::sro::character::EditCharacterRequest::kOwnerId:
        out->Optional_owner_id.OwnerId=UTF8_TO_TCHAR(in->owner_id().c_str());
        out->Optional_owner_id.Optional_owner_idCase = EGrpcSroCharacterEditCharacterRequestOptional_owner_id::OwnerId;
        break;
    }
    switch(in->optional_new_name_case())
    {
    case ::sro::character::EditCharacterRequest::kNewName:
        out->Optional_new_name.NewName=UTF8_TO_TCHAR(in->new_name().c_str());
        out->Optional_new_name.Optional_new_nameCase = EGrpcSroCharacterEditCharacterRequestOptional_new_name::NewName;
        break;
    }
    switch(in->optional_gender_case())
    {
    case ::sro::character::EditCharacterRequest::kGender:
        out->Optional_gender.Gender=UTF8_TO_TCHAR(in->gender().c_str());
        out->Optional_gender.Optional_genderCase = EGrpcSroCharacterEditCharacterRequestOptional_gender::Gender;
        break;
    }
    switch(in->optional_realm_case())
    {
    case ::sro::character::EditCharacterRequest::kRealm:
        out->Optional_realm.Realm=UTF8_TO_TCHAR(in->realm().c_str());
        out->Optional_realm.Optional_realmCase = EGrpcSroCharacterEditCharacterRequestOptional_realm::Realm;
        break;
    }
    switch(in->optional_play_time_case())
    {
    case ::sro::character::EditCharacterRequest::kPlayTime:
        out->Optional_play_time.PlayTime=in->play_time();
        out->Optional_play_time.Optional_play_timeCase = EGrpcSroCharacterEditCharacterRequestOptional_play_time::PlayTime;
        break;
    }
    switch(in->optional_location_case())
    {
    case ::sro::character::EditCharacterRequest::kLocation:
        GRPC_TO_TURBOLINK(&(in->location()), &(out->Optional_location.Location));
        out->Optional_location.Optional_locationCase = EGrpcSroCharacterEditCharacterRequestOptional_location::Location;
        break;
    }
    switch(in->optional_dimension_case())
    {
    case ::sro::character::EditCharacterRequest::kDimension:
        GRPC_TO_TURBOLINK(&(in->dimension()), &(out->Optional_dimension.Dimension));
        out->Optional_dimension.Optional_dimensionCase = EGrpcSroCharacterEditCharacterRequestOptional_dimension::Dimension;
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterEditCharacterRequest* in, ::sro::character::EditCharacterRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Target), out->mutable_target());
    switch (in->Optional_owner_id.Optional_owner_idCase)
    {
    case EGrpcSroCharacterEditCharacterRequestOptional_owner_id::OwnerId:
        out->set_owner_id(TCHAR_TO_UTF8(*(in->Optional_owner_id.OwnerId)));
        break;
    }
    switch (in->Optional_new_name.Optional_new_nameCase)
    {
    case EGrpcSroCharacterEditCharacterRequestOptional_new_name::NewName:
        out->set_new_name(TCHAR_TO_UTF8(*(in->Optional_new_name.NewName)));
        break;
    }
    switch (in->Optional_gender.Optional_genderCase)
    {
    case EGrpcSroCharacterEditCharacterRequestOptional_gender::Gender:
        out->set_gender(TCHAR_TO_UTF8(*(in->Optional_gender.Gender)));
        break;
    }
    switch (in->Optional_realm.Optional_realmCase)
    {
    case EGrpcSroCharacterEditCharacterRequestOptional_realm::Realm:
        out->set_realm(TCHAR_TO_UTF8(*(in->Optional_realm.Realm)));
        break;
    }
    switch (in->Optional_play_time.Optional_play_timeCase)
    {
    case EGrpcSroCharacterEditCharacterRequestOptional_play_time::PlayTime:
        out->set_play_time(in->Optional_play_time.PlayTime);
        break;
    }
    switch (in->Optional_location.Optional_locationCase)
    {
    case EGrpcSroCharacterEditCharacterRequestOptional_location::Location:
        TURBOLINK_TO_GRPC(&(in->Optional_location.Location), out->mutable_location());
        break;
    }
    switch (in->Optional_dimension.Optional_dimensionCase)
    {
    case EGrpcSroCharacterEditCharacterRequestOptional_dimension::Dimension:
        TURBOLINK_TO_GRPC(&(in->Optional_dimension.Dimension), out->mutable_dimension());
        break;
    }
}

void GRPC_TO_TURBOLINK(const ::sro::character::CharacterDetails* in, FGrpcSroCharacterCharacterDetails* out)
{
    out->Id=in->id();
    out->Owner=UTF8_TO_TCHAR(in->owner().c_str());
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Gender=UTF8_TO_TCHAR(in->gender().c_str());
    out->Realm=UTF8_TO_TCHAR(in->realm().c_str());
    out->PlayTime=in->play_time();
    GRPC_TO_TURBOLINK(&(in->location()), &(out->Location));
    out->Dimension=UTF8_TO_TCHAR(in->dimension().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterCharacterDetails* in, ::sro::character::CharacterDetails* out)
{
    out->set_id(in->Id);
    out->set_owner(TCHAR_TO_UTF8(*(in->Owner)));
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_gender(TCHAR_TO_UTF8(*(in->Gender)));
    out->set_realm(TCHAR_TO_UTF8(*(in->Realm)));
    out->set_play_time(in->PlayTime);
    TURBOLINK_TO_GRPC(&(in->Location), out->mutable_location());
    out->set_dimension(TCHAR_TO_UTF8(*(in->Dimension)));
}

void GRPC_TO_TURBOLINK(const ::sro::character::CharactersDetails* in, FGrpcSroCharacterCharactersDetails* out)
{
    out->Characters.Empty();
    for (int i=0; i<in->characters_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->characters(i)), &(out->Characters.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterCharactersDetails* in, ::sro::character::CharactersDetails* out)
{
    for(const auto& value : in->Characters) {
        TURBOLINK_TO_GRPC(&value, out->add_characters());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::character::InventoryItem* in, FGrpcSroCharacterInventoryItem* out)
{
    out->Id=UTF8_TO_TCHAR(in->id().c_str());
    out->Slot=in->slot();
    out->Quantity=in->quantity();
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterInventoryItem* in, ::sro::character::InventoryItem* out)
{
    out->set_id(TCHAR_TO_UTF8(*(in->Id)));
    out->set_slot(in->Slot);
    out->set_quantity(in->Quantity);
}

void GRPC_TO_TURBOLINK(const ::sro::character::Inventory* in, FGrpcSroCharacterInventory* out)
{
    out->InventoryItems.Empty();
    for (int i=0; i<in->inventory_items_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->inventory_items(i)), &(out->InventoryItems.AddZeroed_GetRef()));
    }
    out->BankItems.Empty();
    for (int i=0; i<in->bank_items_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->bank_items(i)), &(out->BankItems.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterInventory* in, ::sro::character::Inventory* out)
{
    for(const auto& value : in->InventoryItems) {
        TURBOLINK_TO_GRPC(&value, out->add_inventory_items());
    } 
    for(const auto& value : in->BankItems) {
        TURBOLINK_TO_GRPC(&value, out->add_bank_items());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::character::UpdateInventoryRequest* in, FGrpcSroCharacterUpdateInventoryRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->target()), &(out->Target));
    out->InventoryItems.Empty();
    for (int i=0; i<in->inventory_items_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->inventory_items(i)), &(out->InventoryItems.AddZeroed_GetRef()));
    }
    out->BankItems.Empty();
    for (int i=0; i<in->bank_items_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->bank_items(i)), &(out->BankItems.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterUpdateInventoryRequest* in, ::sro::character::UpdateInventoryRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Target), out->mutable_target());
    for(const auto& value : in->InventoryItems) {
        TURBOLINK_TO_GRPC(&value, out->add_inventory_items());
    } 
    for(const auto& value : in->BankItems) {
        TURBOLINK_TO_GRPC(&value, out->add_bank_items());
    } 
}

