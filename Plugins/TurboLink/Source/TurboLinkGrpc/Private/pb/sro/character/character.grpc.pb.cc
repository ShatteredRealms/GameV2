// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/character/character.proto

#include "sro/character/character.pb.h"
#include "sro/character/character.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sro {
namespace character {

static const char* CharacterService_method_names[] = {
  "/sro.character.CharacterService/GetCharacters",
  "/sro.character.CharacterService/GetCharacter",
  "/sro.character.CharacterService/CreateCharacter",
  "/sro.character.CharacterService/DeleteCharacter",
  "/sro.character.CharacterService/GetAllCharactersForUser",
  "/sro.character.CharacterService/EditCharacter",
  "/sro.character.CharacterService/AddCharacterPlayTime",
  "/sro.character.CharacterService/GetInventory",
  "/sro.character.CharacterService/SetInventory",
};

std::unique_ptr< CharacterService::Stub> CharacterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CharacterService::Stub> stub(new CharacterService::Stub(channel, options));
  return stub;
}

CharacterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCharacters_(CharacterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCharacter_(CharacterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCharacter_(CharacterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCharacter_(CharacterService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllCharactersForUser_(CharacterService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditCharacter_(CharacterService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddCharacterPlayTime_(CharacterService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInventory_(CharacterService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetInventory_(CharacterService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CharacterService::Stub::GetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::character::CharactersDetails* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::character::CharactersDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCharacters_, context, request, response);
}

void CharacterService::Stub::async::GetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::character::CharactersDetails* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::character::CharactersDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacters_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::character::CharactersDetails* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>* CharacterService::Stub::PrepareAsyncGetCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::CharactersDetails, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCharacters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>* CharacterService::Stub::AsyncGetCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCharactersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::sro::character::CharacterDetails* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::CharacterTarget, ::sro::character::CharacterDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCharacter_, context, request, response);
}

void CharacterService::Stub::async::GetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::CharacterDetails* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::CharacterTarget, ::sro::character::CharacterDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::CharacterDetails* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>* CharacterService::Stub::PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::CharacterDetails, ::sro::character::CharacterTarget, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>* CharacterService::Stub::AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::sro::character::CharacterDetails* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::CreateCharacterRequest, ::sro::character::CharacterDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCharacter_, context, request, response);
}

void CharacterService::Stub::async::CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::CharacterDetails* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::CreateCharacterRequest, ::sro::character::CharacterDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::CharacterDetails* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>* CharacterService::Stub::PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::CharacterDetails, ::sro::character::CreateCharacterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>* CharacterService::Stub::AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::DeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::CharacterTarget, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCharacter_, context, request, response);
}

void CharacterService::Stub::async::DeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::CharacterTarget, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::DeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::character::CharacterTarget, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::sro::character::CharactersDetails* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::UserTarget, ::sro::character::CharactersDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllCharactersForUser_, context, request, response);
}

void CharacterService::Stub::async::GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget* request, ::sro::character::CharactersDetails* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::UserTarget, ::sro::character::CharactersDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllCharactersForUser_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget* request, ::sro::character::CharactersDetails* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllCharactersForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>* CharacterService::Stub::PrepareAsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::CharactersDetails, ::sro::UserTarget, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllCharactersForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>* CharacterService::Stub::AsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllCharactersForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::EditCharacterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditCharacter_, context, request, response);
}

void CharacterService::Stub::async::EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::EditCharacterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::PrepareAsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::character::EditCharacterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::AsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::sro::character::PlayTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::AddPlayTimeRequest, ::sro::character::PlayTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddCharacterPlayTime_, context, request, response);
}

void CharacterService::Stub::async::AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::sro::character::PlayTimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::AddPlayTimeRequest, ::sro::character::PlayTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCharacterPlayTime_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::sro::character::PlayTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCharacterPlayTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::PlayTimeResponse>* CharacterService::Stub::PrepareAsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::PlayTimeResponse, ::sro::character::AddPlayTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddCharacterPlayTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::PlayTimeResponse>* CharacterService::Stub::AsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddCharacterPlayTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::sro::character::Inventory* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::CharacterTarget, ::sro::character::Inventory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInventory_, context, request, response);
}

void CharacterService::Stub::async::GetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::Inventory* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::CharacterTarget, ::sro::character::Inventory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInventory_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::Inventory* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInventory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Inventory>* CharacterService::Stub::PrepareAsyncGetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::Inventory, ::sro::character::CharacterTarget, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInventory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Inventory>* CharacterService::Stub::AsyncGetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInventoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::SetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::UpdateInventoryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetInventory_, context, request, response);
}

void CharacterService::Stub::async::SetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::UpdateInventoryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInventory_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::SetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInventory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::PrepareAsyncSetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::character::UpdateInventoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetInventory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::AsyncSetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetInventoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

CharacterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::google::protobuf::Empty, ::sro::character::CharactersDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::character::CharactersDetails* resp) {
               return service->GetCharacters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::CharacterTarget, ::sro::character::CharacterDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::CharacterTarget* req,
             ::sro::character::CharacterDetails* resp) {
               return service->GetCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::CreateCharacterRequest, ::sro::character::CharacterDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::CreateCharacterRequest* req,
             ::sro::character::CharacterDetails* resp) {
               return service->CreateCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::CharacterTarget, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::CharacterTarget* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::UserTarget, ::sro::character::CharactersDetails, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::UserTarget* req,
             ::sro::character::CharactersDetails* resp) {
               return service->GetAllCharactersForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::EditCharacterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::EditCharacterRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->EditCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::AddPlayTimeRequest, ::sro::character::PlayTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::AddPlayTimeRequest* req,
             ::sro::character::PlayTimeResponse* resp) {
               return service->AddCharacterPlayTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::CharacterTarget, ::sro::character::Inventory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::CharacterTarget* req,
             ::sro::character::Inventory* resp) {
               return service->GetInventory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::UpdateInventoryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::UpdateInventoryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetInventory(ctx, req, resp);
             }, this)));
}

CharacterService::Service::~Service() {
}

::grpc::Status CharacterService::Service::GetCharacters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::character::CharactersDetails* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetCharacter(::grpc::ServerContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::CharacterDetails* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::CreateCharacter(::grpc::ServerContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::CharacterDetails* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::DeleteCharacter(::grpc::ServerContext* context, const ::sro::character::CharacterTarget* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetAllCharactersForUser(::grpc::ServerContext* context, const ::sro::UserTarget* request, ::sro::character::CharactersDetails* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::EditCharacter(::grpc::ServerContext* context, const ::sro::character::EditCharacterRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::AddCharacterPlayTime(::grpc::ServerContext* context, const ::sro::character::AddPlayTimeRequest* request, ::sro::character::PlayTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetInventory(::grpc::ServerContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::Inventory* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::SetInventory(::grpc::ServerContext* context, const ::sro::character::UpdateInventoryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace character

