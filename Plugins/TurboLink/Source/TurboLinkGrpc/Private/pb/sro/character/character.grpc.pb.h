// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/character/character.proto
#ifndef GRPC_sro_2fcharacter_2fcharacter_2eproto__INCLUDED
#define GRPC_sro_2fcharacter_2fcharacter_2eproto__INCLUDED

#include "sro/character/character.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sro {
namespace character {

class CharacterService final {
 public:
  static constexpr char const* service_full_name() {
    return "sro.character.CharacterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::character::CharactersDetails* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>> AsyncGetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>>(AsyncGetCharactersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>> PrepareAsyncGetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>>(PrepareAsyncGetCharactersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::sro::character::CharacterDetails* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>> AsyncGetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>>(AsyncGetCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>> PrepareAsyncGetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>>(PrepareAsyncGetCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::sro::character::CharacterDetails* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::sro::character::CharactersDetails* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>> AsyncGetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>>(AsyncGetAllCharactersForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>> PrepareAsyncGetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>>(PrepareAsyncGetAllCharactersForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncEditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncEditCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncEditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncEditCharacterRaw(context, request, cq));
    }
    // Adds the given amount of playtime to the character and returns the total
    // playtime
    virtual ::grpc::Status AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::sro::character::PlayTimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::PlayTimeResponse>> AsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::PlayTimeResponse>>(AsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::PlayTimeResponse>> PrepareAsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::PlayTimeResponse>>(PrepareAsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::sro::character::Inventory* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Inventory>> AsyncGetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Inventory>>(AsyncGetInventoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Inventory>> PrepareAsyncGetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Inventory>>(PrepareAsyncGetInventoryRaw(context, request, cq));
    }
    virtual ::grpc::Status SetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSetInventoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSetInventoryRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::character::CharactersDetails* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::character::CharactersDetails* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::CharacterDetails* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::CharacterDetails* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::CharacterDetails* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::CharacterDetails* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget* request, ::sro::character::CharactersDetails* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget* request, ::sro::character::CharactersDetails* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Adds the given amount of playtime to the character and returns the total
      // playtime
      virtual void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::sro::character::PlayTimeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::sro::character::PlayTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::Inventory* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::Inventory* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>* AsyncGetCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>* PrepareAsyncGetCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>* AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>* PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharacterDetails>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>* AsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::CharactersDetails>* PrepareAsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::PlayTimeResponse>* AsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::PlayTimeResponse>* PrepareAsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Inventory>* AsyncGetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Inventory>* PrepareAsyncGetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::character::CharactersDetails* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>> AsyncGetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>>(AsyncGetCharactersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>> PrepareAsyncGetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>>(PrepareAsyncGetCharactersRaw(context, request, cq));
    }
    ::grpc::Status GetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::sro::character::CharacterDetails* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>> AsyncGetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>>(AsyncGetCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>> PrepareAsyncGetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>>(PrepareAsyncGetCharacterRaw(context, request, cq));
    }
    ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::sro::character::CharacterDetails* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    ::grpc::Status DeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteCharacterRaw(context, request, cq));
    }
    ::grpc::Status GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::sro::character::CharactersDetails* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>> AsyncGetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>>(AsyncGetAllCharactersForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>> PrepareAsyncGetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>>(PrepareAsyncGetAllCharactersForUserRaw(context, request, cq));
    }
    ::grpc::Status EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncEditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncEditCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncEditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncEditCharacterRaw(context, request, cq));
    }
    ::grpc::Status AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::sro::character::PlayTimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::PlayTimeResponse>> AsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::PlayTimeResponse>>(AsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::PlayTimeResponse>> PrepareAsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::PlayTimeResponse>>(PrepareAsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    ::grpc::Status GetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::sro::character::Inventory* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Inventory>> AsyncGetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Inventory>>(AsyncGetInventoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Inventory>> PrepareAsyncGetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Inventory>>(PrepareAsyncGetInventoryRaw(context, request, cq));
    }
    ::grpc::Status SetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSetInventoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSetInventoryRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::character::CharactersDetails* response, std::function<void(::grpc::Status)>) override;
      void GetCharacters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::character::CharactersDetails* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::CharacterDetails* response, std::function<void(::grpc::Status)>) override;
      void GetCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::CharacterDetails* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::CharacterDetails* response, std::function<void(::grpc::Status)>) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::CharacterDetails* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteCharacter(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget* request, ::sro::character::CharactersDetails* response, std::function<void(::grpc::Status)>) override;
      void GetAllCharactersForUser(::grpc::ClientContext* context, const ::sro::UserTarget* request, ::sro::character::CharactersDetails* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::sro::character::PlayTimeResponse* response, std::function<void(::grpc::Status)>) override;
      void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::sro::character::PlayTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::Inventory* response, std::function<void(::grpc::Status)>) override;
      void GetInventory(::grpc::ClientContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::Inventory* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetInventory(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>* AsyncGetCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>* PrepareAsyncGetCharactersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>* AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>* PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::CharacterDetails>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>* AsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::CharactersDetails>* PrepareAsyncGetAllCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::UserTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::PlayTimeResponse>* AsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::PlayTimeResponse>* PrepareAsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Inventory>* AsyncGetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Inventory>* PrepareAsyncGetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::CharacterTarget& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSetInventoryRaw(::grpc::ClientContext* context, const ::sro::character::UpdateInventoryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCharacters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllCharactersForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_EditCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_AddCharacterPlayTime_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInventory_;
    const ::grpc::internal::RpcMethod rpcmethod_SetInventory_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetCharacters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::character::CharactersDetails* response);
    virtual ::grpc::Status GetCharacter(::grpc::ServerContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::CharacterDetails* response);
    virtual ::grpc::Status CreateCharacter(::grpc::ServerContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::CharacterDetails* response);
    virtual ::grpc::Status DeleteCharacter(::grpc::ServerContext* context, const ::sro::character::CharacterTarget* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* context, const ::sro::UserTarget* request, ::sro::character::CharactersDetails* response);
    virtual ::grpc::Status EditCharacter(::grpc::ServerContext* context, const ::sro::character::EditCharacterRequest* request, ::google::protobuf::Empty* response);
    // Adds the given amount of playtime to the character and returns the total
    // playtime
    virtual ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* context, const ::sro::character::AddPlayTimeRequest* request, ::sro::character::PlayTimeResponse* response);
    virtual ::grpc::Status GetInventory(::grpc::ServerContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::Inventory* response);
    virtual ::grpc::Status SetInventory(::grpc::ServerContext* context, const ::sro::character::UpdateInventoryRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCharacters() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacters(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::CharactersDetails>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCharacter() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacter(::grpc::ServerContext* context, ::sro::character::CharacterTarget* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::CharacterDetails>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::sro::character::CreateCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::CharacterDetails>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCharacter(::grpc::ServerContext* context, ::sro::character::CharacterTarget* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::UserTarget* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllCharactersForUser(::grpc::ServerContext* context, ::sro::UserTarget* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::CharactersDetails>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EditCharacter() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditCharacter(::grpc::ServerContext* context, ::sro::character::EditCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::sro::character::PlayTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCharacterPlayTime(::grpc::ServerContext* context, ::sro::character::AddPlayTimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::PlayTimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInventory() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::Inventory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInventory(::grpc::ServerContext* context, ::sro::character::CharacterTarget* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::Inventory>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetInventory() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::UpdateInventoryRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetInventory(::grpc::ServerContext* context, ::sro::character::UpdateInventoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCharacters<WithAsyncMethod_GetCharacter<WithAsyncMethod_CreateCharacter<WithAsyncMethod_DeleteCharacter<WithAsyncMethod_GetAllCharactersForUser<WithAsyncMethod_EditCharacter<WithAsyncMethod_AddCharacterPlayTime<WithAsyncMethod_GetInventory<WithAsyncMethod_SetInventory<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCharacters() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::character::CharactersDetails>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::sro::character::CharactersDetails* response) { return this->GetCharacters(context, request, response); }));}
    void SetMessageAllocatorFor_GetCharacters(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::sro::character::CharactersDetails>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::character::CharactersDetails>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacters(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::character::CharactersDetails* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCharacter() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::CharacterTarget, ::sro::character::CharacterDetails>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::CharacterDetails* response) { return this->GetCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_GetCharacter(
        ::grpc::MessageAllocator< ::sro::character::CharacterTarget, ::sro::character::CharacterDetails>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::CharacterTarget, ::sro::character::CharacterDetails>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::CharacterDetails* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::CreateCharacterRequest, ::sro::character::CharacterDetails>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::CharacterDetails* response) { return this->CreateCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCharacter(
        ::grpc::MessageAllocator< ::sro::character::CreateCharacterRequest, ::sro::character::CharacterDetails>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::CreateCharacterRequest, ::sro::character::CharacterDetails>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::CharacterDetails* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::CharacterTarget, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::CharacterTarget* request, ::google::protobuf::Empty* response) { return this->DeleteCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCharacter(
        ::grpc::MessageAllocator< ::sro::character::CharacterTarget, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::CharacterTarget, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::UserTarget, ::sro::character::CharactersDetails>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::UserTarget* request, ::sro::character::CharactersDetails* response) { return this->GetAllCharactersForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllCharactersForUser(
        ::grpc::MessageAllocator< ::sro::UserTarget, ::sro::character::CharactersDetails>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::UserTarget, ::sro::character::CharactersDetails>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::UserTarget* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllCharactersForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::UserTarget* /*request*/, ::sro::character::CharactersDetails* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EditCharacter() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::EditCharacterRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::EditCharacterRequest* request, ::google::protobuf::Empty* response) { return this->EditCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_EditCharacter(
        ::grpc::MessageAllocator< ::sro::character::EditCharacterRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::EditCharacterRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::AddPlayTimeRequest, ::sro::character::PlayTimeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::AddPlayTimeRequest* request, ::sro::character::PlayTimeResponse* response) { return this->AddCharacterPlayTime(context, request, response); }));}
    void SetMessageAllocatorFor_AddCharacterPlayTime(
        ::grpc::MessageAllocator< ::sro::character::AddPlayTimeRequest, ::sro::character::PlayTimeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::AddPlayTimeRequest, ::sro::character::PlayTimeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::sro::character::PlayTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCharacterPlayTime(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::sro::character::PlayTimeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInventory() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::CharacterTarget, ::sro::character::Inventory>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::CharacterTarget* request, ::sro::character::Inventory* response) { return this->GetInventory(context, request, response); }));}
    void SetMessageAllocatorFor_GetInventory(
        ::grpc::MessageAllocator< ::sro::character::CharacterTarget, ::sro::character::Inventory>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::CharacterTarget, ::sro::character::Inventory>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::Inventory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInventory(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::Inventory* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetInventory() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::UpdateInventoryRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::UpdateInventoryRequest* request, ::google::protobuf::Empty* response) { return this->SetInventory(context, request, response); }));}
    void SetMessageAllocatorFor_SetInventory(
        ::grpc::MessageAllocator< ::sro::character::UpdateInventoryRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::UpdateInventoryRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::UpdateInventoryRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetInventory(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::UpdateInventoryRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCharacters<WithCallbackMethod_GetCharacter<WithCallbackMethod_CreateCharacter<WithCallbackMethod_DeleteCharacter<WithCallbackMethod_GetAllCharactersForUser<WithCallbackMethod_EditCharacter<WithCallbackMethod_AddCharacterPlayTime<WithCallbackMethod_GetInventory<WithCallbackMethod_SetInventory<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCharacters() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCharacter() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::UserTarget* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EditCharacter() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::sro::character::PlayTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInventory() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::Inventory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetInventory() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::UpdateInventoryRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCharacters() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCharacter() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::UserTarget* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllCharactersForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EditCharacter() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::sro::character::PlayTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCharacterPlayTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInventory() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::Inventory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInventory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetInventory() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::UpdateInventoryRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetInventory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCharacters() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCharacters(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCharacter() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllCharactersForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::UserTarget* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllCharactersForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EditCharacter() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EditCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddCharacterPlayTime(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::sro::character::PlayTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCharacterPlayTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInventory() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInventory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::Inventory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInventory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetInventory() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetInventory(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::UpdateInventoryRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetInventory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCharacters() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::sro::character::CharactersDetails>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::sro::character::CharactersDetails>* streamer) {
                       return this->StreamedGetCharacters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCharacters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::sro::character::CharactersDetails>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCharacter() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::CharacterTarget, ::sro::character::CharacterDetails>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::CharacterTarget, ::sro::character::CharacterDetails>* streamer) {
                       return this->StreamedGetCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::CharacterTarget,::sro::character::CharacterDetails>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::CreateCharacterRequest, ::sro::character::CharacterDetails>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::CreateCharacterRequest, ::sro::character::CharacterDetails>* streamer) {
                       return this->StreamedCreateCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::CharacterDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::CreateCharacterRequest,::sro::character::CharacterDetails>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::CharacterTarget, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::CharacterTarget, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::CharacterTarget,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllCharactersForUser() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::UserTarget, ::sro::character::CharactersDetails>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::UserTarget, ::sro::character::CharactersDetails>* streamer) {
                       return this->StreamedGetAllCharactersForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::UserTarget* /*request*/, ::sro::character::CharactersDetails* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllCharactersForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::UserTarget,::sro::character::CharactersDetails>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EditCharacter() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::EditCharacterRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::EditCharacterRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedEditCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::EditCharacterRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::AddPlayTimeRequest, ::sro::character::PlayTimeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::AddPlayTimeRequest, ::sro::character::PlayTimeResponse>* streamer) {
                       return this->StreamedAddCharacterPlayTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::sro::character::PlayTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddCharacterPlayTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::AddPlayTimeRequest,::sro::character::PlayTimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInventory() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::CharacterTarget, ::sro::character::Inventory>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::CharacterTarget, ::sro::character::Inventory>* streamer) {
                       return this->StreamedGetInventory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::CharacterTarget* /*request*/, ::sro::character::Inventory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInventory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::CharacterTarget,::sro::character::Inventory>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetInventory() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::UpdateInventoryRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::UpdateInventoryRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSetInventory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetInventory(::grpc::ServerContext* /*context*/, const ::sro::character::UpdateInventoryRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetInventory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::UpdateInventoryRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCharacters<WithStreamedUnaryMethod_GetCharacter<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_DeleteCharacter<WithStreamedUnaryMethod_GetAllCharactersForUser<WithStreamedUnaryMethod_EditCharacter<WithStreamedUnaryMethod_AddCharacterPlayTime<WithStreamedUnaryMethod_GetInventory<WithStreamedUnaryMethod_SetInventory<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCharacters<WithStreamedUnaryMethod_GetCharacter<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_DeleteCharacter<WithStreamedUnaryMethod_GetAllCharactersForUser<WithStreamedUnaryMethod_EditCharacter<WithStreamedUnaryMethod_AddCharacterPlayTime<WithStreamedUnaryMethod_GetInventory<WithStreamedUnaryMethod_SetInventory<Service > > > > > > > > > StreamedService;
};

}  // namespace character
}  // namespace sro


#endif  // GRPC_sro_2fcharacter_2fcharacter_2eproto__INCLUDED
