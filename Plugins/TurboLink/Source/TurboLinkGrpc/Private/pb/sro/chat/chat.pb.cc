#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/chat/chat.proto

#include "sro/chat/chat.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sro {
namespace chat {
template <typename>
PROTOBUF_CONSTEXPR RequestSetChannelAuth::RequestSetChannelAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ids_)*/ {}
  ,/* _impl_._ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.character_)*/nullptr} {}
struct RequestSetChannelAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestSetChannelAuthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestSetChannelAuthDefaultTypeInternal() {}
  union {
    RequestSetChannelAuth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestSetChannelAuthDefaultTypeInternal _RequestSetChannelAuth_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RequestChatChannelAuthChange::RequestChatChannelAuthChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ids_)*/ {}
  ,/* _impl_._ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.character_)*/nullptr
  , /*decltype(_impl_.add_)*/ false
} {}
struct RequestChatChannelAuthChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestChatChannelAuthChangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestChatChannelAuthChangeDefaultTypeInternal() {}
  union {
    RequestChatChannelAuthChange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestChatChannelAuthChangeDefaultTypeInternal _RequestChatChannelAuthChange_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChatChannel::ChatChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dimension_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatChannelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatChannelDefaultTypeInternal() {}
  union {
    ChatChannel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatChannelDefaultTypeInternal _ChatChannel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChatChannels::ChatChannels(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatChannelsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatChannelsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatChannelsDefaultTypeInternal() {}
  union {
    ChatChannels _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatChannelsDefaultTypeInternal _ChatChannels_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateChannelMessage::CreateChannelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dimension_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateChannelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateChannelMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateChannelMessageDefaultTypeInternal() {}
  union {
    CreateChannelMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateChannelMessageDefaultTypeInternal _CreateChannelMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChatChannelTarget::ChatChannelTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatChannelTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatChannelTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatChannelTargetDefaultTypeInternal() {}
  union {
    ChatChannelTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatChannelTargetDefaultTypeInternal _ChatChannelTarget_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.character_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SendChatMessageRequest::SendChatMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chat_message_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/ ::uint64_t{0u}
} {}
struct SendChatMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChatMessageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChatMessageRequestDefaultTypeInternal() {}
  union {
    SendChatMessageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChatMessageRequestDefaultTypeInternal _SendChatMessageRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SendDirectMessageRequest::SendDirectMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.chat_message_)*/nullptr} {}
struct SendDirectMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendDirectMessageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendDirectMessageRequestDefaultTypeInternal() {}
  union {
    SendDirectMessageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendDirectMessageRequestDefaultTypeInternal _SendDirectMessageRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateChatChannelRequest::UpdateChatChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.optional_name_)*/{}
  , /*decltype(_impl_.optional_dimension_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UpdateChatChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateChatChannelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateChatChannelRequestDefaultTypeInternal() {}
  union {
    UpdateChatChannelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateChatChannelRequestDefaultTypeInternal _UpdateChatChannelRequest_default_instance_;
}  // namespace chat
}  // namespace sro
static ::_pb::Metadata file_level_metadata_sro_2fchat_2fchat_2eproto[10];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sro_2fchat_2fchat_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sro_2fchat_2fchat_2eproto = nullptr;
const ::uint32_t TableStruct_sro_2fchat_2fchat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestSetChannelAuth, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestSetChannelAuth, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestSetChannelAuth, _impl_.character_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestSetChannelAuth, _impl_.ids_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestChatChannelAuthChange, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestChatChannelAuthChange, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestChatChannelAuthChange, _impl_.character_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestChatChannelAuthChange, _impl_.add_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestChatChannelAuthChange, _impl_.ids_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannel, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannel, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannel, _impl_.dimension_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannels, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannels, _impl_.channels_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::CreateChannelMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::CreateChannelMessage, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::CreateChannelMessage, _impl_.dimension_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannelTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannelTarget, _impl_.id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatMessage, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatMessage, _impl_.character_name_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendChatMessageRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendChatMessageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendChatMessageRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendChatMessageRequest, _impl_.chat_message_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendDirectMessageRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendDirectMessageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendDirectMessageRequest, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendDirectMessageRequest, _impl_.chat_message_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_.channel_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_.optional_name_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_.optional_dimension_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::sro::chat::RequestSetChannelAuth)},
        { 12, 23, -1, sizeof(::sro::chat::RequestChatChannelAuthChange)},
        { 26, -1, -1, sizeof(::sro::chat::ChatChannel)},
        { 37, -1, -1, sizeof(::sro::chat::ChatChannels)},
        { 46, -1, -1, sizeof(::sro::chat::CreateChannelMessage)},
        { 56, -1, -1, sizeof(::sro::chat::ChatChannelTarget)},
        { 65, -1, -1, sizeof(::sro::chat::ChatMessage)},
        { 75, 85, -1, sizeof(::sro::chat::SendChatMessageRequest)},
        { 87, 97, -1, sizeof(::sro::chat::SendDirectMessageRequest)},
        { 99, -1, -1, sizeof(::sro::chat::UpdateChatChannelRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sro::chat::_RequestSetChannelAuth_default_instance_._instance,
    &::sro::chat::_RequestChatChannelAuthChange_default_instance_._instance,
    &::sro::chat::_ChatChannel_default_instance_._instance,
    &::sro::chat::_ChatChannels_default_instance_._instance,
    &::sro::chat::_CreateChannelMessage_default_instance_._instance,
    &::sro::chat::_ChatChannelTarget_default_instance_._instance,
    &::sro::chat::_ChatMessage_default_instance_._instance,
    &::sro::chat::_SendChatMessageRequest_default_instance_._instance,
    &::sro::chat::_SendDirectMessageRequest_default_instance_._instance,
    &::sro::chat::_UpdateChatChannelRequest_default_instance_._instance,
};
const char descriptor_table_protodef_sro_2fchat_2fchat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023sro/chat/chat.proto\022\010sro.chat\032\034google/"
    "api/annotations.proto\032\033google/protobuf/e"
    "mpty.proto\032\035sro/character/character.prot"
    "o\"W\n\025RequestSetChannelAuth\0221\n\tcharacter\030"
    "\001 \001(\0132\036.sro.character.CharacterTarget\022\013\n"
    "\003ids\030\002 \003(\004\"k\n\034RequestChatChannelAuthChan"
    "ge\0221\n\tcharacter\030\001 \001(\0132\036.sro.character.Ch"
    "aracterTarget\022\013\n\003add\030\002 \001(\010\022\013\n\003ids\030\003 \003(\004\""
    ":\n\013ChatChannel\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t"
    "\022\021\n\tdimension\030\003 \001(\t\"7\n\014ChatChannels\022\'\n\010c"
    "hannels\030\001 \003(\0132\025.sro.chat.ChatChannel\"7\n\024"
    "CreateChannelMessage\022\014\n\004name\030\001 \001(\t\022\021\n\tdi"
    "mension\030\002 \001(\t\"\037\n\021ChatChannelTarget\022\n\n\002id"
    "\030\001 \001(\004\"6\n\013ChatMessage\022\017\n\007message\030\001 \001(\t\022\026"
    "\n\016character_name\030\002 \001(\t\"Y\n\026SendChatMessag"
    "eRequest\022\022\n\nchannel_id\030\001 \001(\004\022+\n\014chat_mes"
    "sage\030\002 \001(\0132\025.sro.chat.ChatMessage\"w\n\030Sen"
    "dDirectMessageRequest\022.\n\006target\030\001 \001(\0132\036."
    "sro.character.CharacterTarget\022+\n\014chat_me"
    "ssage\030\002 \001(\0132\025.sro.chat.ChatMessage\"z\n\030Up"
    "dateChatChannelRequest\022\022\n\nchannel_id\030\001 \001"
    "(\004\022\016\n\004name\030\002 \001(\tH\000\022\023\n\tdimension\030\003 \001(\tH\001B"
    "\017\n\roptional_nameB\024\n\022optional_dimension2\361"
    "\014\n\013ChatService\022k\n\016ConnectChannel\022\033.sro.c"
    "hat.ChatChannelTarget\032\025.sro.chat.ChatMes"
    "sage\"#\202\323\344\223\002\035\022\033/v1/message/channel/id/{id"
    "}0\001\022\233\001\n\024ConnectDirectMessage\022\036.sro.chara"
    "cter.CharacterTarget\032\025.sro.chat.ChatMess"
    "age\"J\202\323\344\223\002D\022!/v1/message/character/name/"
    "{name}Z\037\022\035/v1/message/character/id/{id}0"
    "\001\022{\n\017SendChatMessage\022 .sro.chat.SendChat"
    "MessageRequest\032\026.google.protobuf.Empty\"."
    "\202\323\344\223\002(\032#/v1/message/channel/id/{channel_"
    "id}:\001*\022\256\001\n\021SendDirectMessage\022\".sro.chat."
    "SendDirectMessageRequest\032\026.google.protob"
    "uf.Empty\"]\202\323\344\223\002W\032(/v1/message/character/"
    "name/{target.name}:\001*Z(\032&/v1/message/cha"
    "racter/name/{target.id}\022^\n\nGetChannel\022\033."
    "sro.chat.ChatChannelTarget\032\025.sro.chat.Ch"
    "atChannel\"\034\202\323\344\223\002\026\022\024/v1/channels/id/{id}\022"
    "W\n\017AllChatChannels\022\026.google.protobuf.Emp"
    "ty\032\026.sro.chat.ChatChannels\"\024\202\323\344\223\002\016\022\014/v1/"
    "channels\022`\n\rCreateChannel\022\036.sro.chat.Cre"
    "ateChannelMessage\032\026.google.protobuf.Empt"
    "y\"\027\202\323\344\223\002\021\"\014/v1/channels:\001*\022b\n\rDeleteChan"
    "nel\022\033.sro.chat.ChatChannelTarget\032\026.googl"
    "e.protobuf.Empty\"\034\202\323\344\223\002\026*\024/v1/channels/i"
    "d/{id}\022r\n\013EditChannel\022\".sro.chat.UpdateC"
    "hatChannelRequest\032\026.google.protobuf.Empt"
    "y\"\'\202\323\344\223\002!\032\034/v1/channels/id/{channel_id}:"
    "\001*\022\241\001\n\031GetAuthorizedChatChannels\022\036.sro.c"
    "haracter.CharacterTarget\032\026.sro.chat.Chat"
    "Channels\"L\202\323\344\223\002F\022\"/v1/channels/character"
    "/name/{name}Z \022\036/v1/channels/character/i"
    "d/{id}\022\317\001\n#UpdateUserChatChannelAuthoriz"
    "ations\022&.sro.chat.RequestChatChannelAuth"
    "Change\032\026.google.protobuf.Empty\"h\202\323\344\223\002b\032-"
    "/v1/channels/characters/name/{character."
    "name}:\001*Z.\032)/v1/channels/characters/id/{"
    "character.id}:\001*\022\277\001\n SetUserChatChannelA"
    "uthorizations\022\037.sro.chat.RequestSetChann"
    "elAuth\032\026.google.protobuf.Empty\"b\202\323\344\223\002\\\"-"
    "/v1/channels/characters/name/{character."
    "name}Z+\")/v1/channels/characters/id/{cha"
    "racter.id}B\010Z\006pkg/pbb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sro_2fchat_2fchat_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_sro_2fcharacter_2fcharacter_2eproto,
};
static ::absl::once_flag descriptor_table_sro_2fchat_2fchat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sro_2fchat_2fchat_2eproto = {
    false,
    false,
    2588,
    descriptor_table_protodef_sro_2fchat_2fchat_2eproto,
    "sro/chat/chat.proto",
    &descriptor_table_sro_2fchat_2fchat_2eproto_once,
    descriptor_table_sro_2fchat_2fchat_2eproto_deps,
    3,
    10,
    schemas,
    file_default_instances,
    TableStruct_sro_2fchat_2fchat_2eproto::offsets,
    file_level_metadata_sro_2fchat_2fchat_2eproto,
    file_level_enum_descriptors_sro_2fchat_2fchat_2eproto,
    file_level_service_descriptors_sro_2fchat_2fchat_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sro_2fchat_2fchat_2eproto_getter() {
  return &descriptor_table_sro_2fchat_2fchat_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sro_2fchat_2fchat_2eproto(&descriptor_table_sro_2fchat_2fchat_2eproto);
namespace sro {
namespace chat {
// ===================================================================

class RequestSetChannelAuth::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestSetChannelAuth>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RequestSetChannelAuth, _impl_._has_bits_);
  static const ::sro::character::CharacterTarget& character(const RequestSetChannelAuth* msg);
  static void set_has_character(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::character::CharacterTarget&
RequestSetChannelAuth::_Internal::character(const RequestSetChannelAuth* msg) {
  return *msg->_impl_.character_;
}
void RequestSetChannelAuth::clear_character() {
  if (_impl_.character_ != nullptr) _impl_.character_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RequestSetChannelAuth::RequestSetChannelAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.RequestSetChannelAuth)
}
RequestSetChannelAuth::RequestSetChannelAuth(const RequestSetChannelAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestSetChannelAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_) { from._impl_.ids_ }
    ,/* _impl_._ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.character_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.character_ = new ::sro::character::CharacterTarget(*from._impl_.character_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.RequestSetChannelAuth)
}

inline void RequestSetChannelAuth::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_) { arena }
    ,/* _impl_._ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.character_){nullptr}
  };
}

RequestSetChannelAuth::~RequestSetChannelAuth() {
  // @@protoc_insertion_point(destructor:sro.chat.RequestSetChannelAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestSetChannelAuth::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.character_;
}

void RequestSetChannelAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestSetChannelAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.RequestSetChannelAuth)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.character_ != nullptr);
    _impl_.character_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSetChannelAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sro.character.CharacterTarget character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestSetChannelAuth::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.RequestSetChannelAuth)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.character.CharacterTarget character = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::character(this),
        _Internal::character(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 ids = 2;
  {
    int byte_size = _impl_._ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(2, _internal_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.RequestSetChannelAuth)
  return target;
}

::size_t RequestSetChannelAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.RequestSetChannelAuth)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ids = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ids())
    ;
    _impl_._ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .sro.character.CharacterTarget character = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestSetChannelAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestSetChannelAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestSetChannelAuth::GetClassData() const { return &_class_data_; }


void RequestSetChannelAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestSetChannelAuth*>(&to_msg);
  auto& from = static_cast<const RequestSetChannelAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.RequestSetChannelAuth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_character()->::sro::character::CharacterTarget::MergeFrom(
        from._internal_character());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestSetChannelAuth::CopyFrom(const RequestSetChannelAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.RequestSetChannelAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetChannelAuth::IsInitialized() const {
  return true;
}

void RequestSetChannelAuth::InternalSwap(RequestSetChannelAuth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.character_, other->_impl_.character_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSetChannelAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[0]);
}
// ===================================================================

class RequestChatChannelAuthChange::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestChatChannelAuthChange>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RequestChatChannelAuthChange, _impl_._has_bits_);
  static const ::sro::character::CharacterTarget& character(const RequestChatChannelAuthChange* msg);
  static void set_has_character(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::character::CharacterTarget&
RequestChatChannelAuthChange::_Internal::character(const RequestChatChannelAuthChange* msg) {
  return *msg->_impl_.character_;
}
void RequestChatChannelAuthChange::clear_character() {
  if (_impl_.character_ != nullptr) _impl_.character_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RequestChatChannelAuthChange::RequestChatChannelAuthChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.RequestChatChannelAuthChange)
}
RequestChatChannelAuthChange::RequestChatChannelAuthChange(const RequestChatChannelAuthChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestChatChannelAuthChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_) { from._impl_.ids_ }
    ,/* _impl_._ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.character_){nullptr}
    , decltype(_impl_.add_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.character_ = new ::sro::character::CharacterTarget(*from._impl_.character_);
  }
  _this->_impl_.add_ = from._impl_.add_;
  // @@protoc_insertion_point(copy_constructor:sro.chat.RequestChatChannelAuthChange)
}

inline void RequestChatChannelAuthChange::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_) { arena }
    ,/* _impl_._ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.character_){nullptr}
    , decltype(_impl_.add_) { false }

  };
}

RequestChatChannelAuthChange::~RequestChatChannelAuthChange() {
  // @@protoc_insertion_point(destructor:sro.chat.RequestChatChannelAuthChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestChatChannelAuthChange::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.character_;
}

void RequestChatChannelAuthChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestChatChannelAuthChange::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.RequestChatChannelAuthChange)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.character_ != nullptr);
    _impl_.character_->Clear();
  }
  _impl_.add_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestChatChannelAuthChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sro.character.CharacterTarget character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestChatChannelAuthChange::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.RequestChatChannelAuthChange)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.character.CharacterTarget character = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::character(this),
        _Internal::character(this).GetCachedSize(), target, stream);
  }

  // bool add = 2;
  if (this->_internal_add() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_add(), target);
  }

  // repeated uint64 ids = 3;
  {
    int byte_size = _impl_._ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(3, _internal_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.RequestChatChannelAuthChange)
  return target;
}

::size_t RequestChatChannelAuthChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.RequestChatChannelAuthChange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ids = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ids())
    ;
    _impl_._ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .sro.character.CharacterTarget character = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_);
  }

  // bool add = 2;
  if (this->_internal_add() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestChatChannelAuthChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestChatChannelAuthChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestChatChannelAuthChange::GetClassData() const { return &_class_data_; }


void RequestChatChannelAuthChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestChatChannelAuthChange*>(&to_msg);
  auto& from = static_cast<const RequestChatChannelAuthChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.RequestChatChannelAuthChange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_character()->::sro::character::CharacterTarget::MergeFrom(
        from._internal_character());
  }
  if (from._internal_add() != 0) {
    _this->_internal_set_add(from._internal_add());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestChatChannelAuthChange::CopyFrom(const RequestChatChannelAuthChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.RequestChatChannelAuthChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChatChannelAuthChange::IsInitialized() const {
  return true;
}

void RequestChatChannelAuthChange::InternalSwap(RequestChatChannelAuthChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestChatChannelAuthChange, _impl_.add_)
      + sizeof(RequestChatChannelAuthChange::_impl_.add_)
      - PROTOBUF_FIELD_OFFSET(RequestChatChannelAuthChange, _impl_.character_)>(
          reinterpret_cast<char*>(&_impl_.character_),
          reinterpret_cast<char*>(&other->_impl_.character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestChatChannelAuthChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[1]);
}
// ===================================================================

class ChatChannel::_Internal {
 public:
};

ChatChannel::ChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatChannel)
}
ChatChannel::ChatChannel(const ChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.dimension_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.dimension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dimension().empty()) {
    _this->_impl_.dimension_.Set(from._internal_dimension(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatChannel)
}

inline void ChatChannel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.dimension_) {}

    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dimension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatChannel::~ChatChannel() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatChannel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.dimension_.Destroy();
}

void ChatChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatChannel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.dimension_.ClearToEmpty();
  _impl_.id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatChannel.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dimension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dimension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatChannel.dimension"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatChannel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatChannel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatChannel.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string dimension = 3;
  if (!this->_internal_dimension().empty()) {
    const std::string& _s = this->_internal_dimension();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatChannel.dimension");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatChannel)
  return target;
}

::size_t ChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatChannel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string dimension = 3;
  if (!this->_internal_dimension().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dimension());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatChannel::GetClassData() const { return &_class_data_; }


void ChatChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatChannel*>(&to_msg);
  auto& from = static_cast<const ChatChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatChannel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_dimension().empty()) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatChannel::CopyFrom(const ChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannel::IsInitialized() const {
  return true;
}

void ChatChannel::InternalSwap(ChatChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dimension_, lhs_arena,
                                       &other->_impl_.dimension_, rhs_arena);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[2]);
}
// ===================================================================

class ChatChannels::_Internal {
 public:
};

ChatChannels::ChatChannels(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatChannels)
}
ChatChannels::ChatChannels(const ChatChannels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatChannels* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){from._impl_.channels_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatChannels)
}

inline void ChatChannels::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChatChannels::~ChatChannels() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatChannels)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatChannels::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_channels()->~RepeatedPtrField();
}

void ChatChannels::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatChannels::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatChannels)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_channels()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatChannels::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.chat.ChatChannel channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatChannels::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatChannels)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.chat.ChatChannel channels = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatChannels)
  return target;
}

::size_t ChatChannels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatChannels)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.chat.ChatChannel channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_internal_channels()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatChannels::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatChannels::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatChannels::GetClassData() const { return &_class_data_; }


void ChatChannels::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatChannels*>(&to_msg);
  auto& from = static_cast<const ChatChannels&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatChannels)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_channels()->MergeFrom(from._internal_channels());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatChannels::CopyFrom(const ChatChannels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatChannels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannels::IsInitialized() const {
  return true;
}

void ChatChannels::InternalSwap(ChatChannels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_channels()->InternalSwap(other->_internal_mutable_channels());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatChannels::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[3]);
}
// ===================================================================

class CreateChannelMessage::_Internal {
 public:
};

CreateChannelMessage::CreateChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.CreateChannelMessage)
}
CreateChannelMessage::CreateChannelMessage(const CreateChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateChannelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.dimension_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.dimension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dimension().empty()) {
    _this->_impl_.dimension_.Set(from._internal_dimension(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.CreateChannelMessage)
}

inline void CreateChannelMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.dimension_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dimension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateChannelMessage::~CreateChannelMessage() {
  // @@protoc_insertion_point(destructor:sro.chat.CreateChannelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateChannelMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.dimension_.Destroy();
}

void CreateChannelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.CreateChannelMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.dimension_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChannelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.CreateChannelMessage.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dimension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dimension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.CreateChannelMessage.dimension"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateChannelMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.CreateChannelMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.CreateChannelMessage.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string dimension = 2;
  if (!this->_internal_dimension().empty()) {
    const std::string& _s = this->_internal_dimension();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.CreateChannelMessage.dimension");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.CreateChannelMessage)
  return target;
}

::size_t CreateChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.CreateChannelMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string dimension = 2;
  if (!this->_internal_dimension().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dimension());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChannelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateChannelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChannelMessage::GetClassData() const { return &_class_data_; }


void CreateChannelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateChannelMessage*>(&to_msg);
  auto& from = static_cast<const CreateChannelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.CreateChannelMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_dimension().empty()) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChannelMessage::CopyFrom(const CreateChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.CreateChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelMessage::IsInitialized() const {
  return true;
}

void CreateChannelMessage::InternalSwap(CreateChannelMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dimension_, lhs_arena,
                                       &other->_impl_.dimension_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChannelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[4]);
}
// ===================================================================

class ChatChannelTarget::_Internal {
 public:
};

ChatChannelTarget::ChatChannelTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatChannelTarget)
}
ChatChannelTarget::ChatChannelTarget(const ChatChannelTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatChannelTarget)
}

inline void ChatChannelTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChatChannelTarget::~ChatChannelTarget() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatChannelTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatChannelTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatChannelTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatChannelTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatChannelTarget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatChannelTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatChannelTarget::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatChannelTarget)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatChannelTarget)
  return target;
}

::size_t ChatChannelTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatChannelTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatChannelTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatChannelTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatChannelTarget::GetClassData() const { return &_class_data_; }


void ChatChannelTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatChannelTarget*>(&to_msg);
  auto& from = static_cast<const ChatChannelTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatChannelTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatChannelTarget::CopyFrom(const ChatChannelTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatChannelTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannelTarget::IsInitialized() const {
  return true;
}

void ChatChannelTarget::InternalSwap(ChatChannelTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatChannelTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[5]);
}
// ===================================================================

class ChatMessage::_Internal {
 public:
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.character_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  _impl_.character_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character_name().empty()) {
    _this->_impl_.character_name_.Set(from._internal_character_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatMessage)
}

inline void ChatMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.character_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.character_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.character_name_.Destroy();
}

void ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.character_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatMessage.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string character_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_character_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatMessage.character_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatMessage.message");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string character_name = 2;
  if (!this->_internal_character_name().empty()) {
    const std::string& _s = this->_internal_character_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatMessage.character_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatMessage)
  return target;
}

::size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // string character_name = 2;
  if (!this->_internal_character_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_character_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }


void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_character_name().empty()) {
    _this->_internal_set_character_name(from._internal_character_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_name_, lhs_arena,
                                       &other->_impl_.character_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[6]);
}
// ===================================================================

class SendChatMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendChatMessageRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SendChatMessageRequest, _impl_._has_bits_);
  static const ::sro::chat::ChatMessage& chat_message(const SendChatMessageRequest* msg);
  static void set_has_chat_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::chat::ChatMessage&
SendChatMessageRequest::_Internal::chat_message(const SendChatMessageRequest* msg) {
  return *msg->_impl_.chat_message_;
}
SendChatMessageRequest::SendChatMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.SendChatMessageRequest)
}
SendChatMessageRequest::SendChatMessageRequest(const SendChatMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendChatMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chat_message_){nullptr}
    , decltype(_impl_.channel_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.chat_message_ = new ::sro::chat::ChatMessage(*from._impl_.chat_message_);
  }
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:sro.chat.SendChatMessageRequest)
}

inline void SendChatMessageRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chat_message_){nullptr}
    , decltype(_impl_.channel_id_) { ::uint64_t{0u} }

  };
}

SendChatMessageRequest::~SendChatMessageRequest() {
  // @@protoc_insertion_point(destructor:sro.chat.SendChatMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendChatMessageRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chat_message_;
}

void SendChatMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendChatMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.SendChatMessageRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.chat_message_ != nullptr);
    _impl_.chat_message_->Clear();
  }
  _impl_.channel_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendChatMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .sro.chat.ChatMessage chat_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SendChatMessageRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.SendChatMessageRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_channel_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.chat.ChatMessage chat_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chat_message(this),
        _Internal::chat_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.SendChatMessageRequest)
  return target;
}

::size_t SendChatMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.SendChatMessageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sro.chat.ChatMessage chat_message = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chat_message_);
  }

  // uint64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendChatMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendChatMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendChatMessageRequest::GetClassData() const { return &_class_data_; }


void SendChatMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendChatMessageRequest*>(&to_msg);
  auto& from = static_cast<const SendChatMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.SendChatMessageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_chat_message()->::sro::chat::ChatMessage::MergeFrom(
        from._internal_chat_message());
  }
  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendChatMessageRequest::CopyFrom(const SendChatMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.SendChatMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChatMessageRequest::IsInitialized() const {
  return true;
}

void SendChatMessageRequest::InternalSwap(SendChatMessageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendChatMessageRequest, _impl_.channel_id_)
      + sizeof(SendChatMessageRequest::_impl_.channel_id_)
      - PROTOBUF_FIELD_OFFSET(SendChatMessageRequest, _impl_.chat_message_)>(
          reinterpret_cast<char*>(&_impl_.chat_message_),
          reinterpret_cast<char*>(&other->_impl_.chat_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendChatMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[7]);
}
// ===================================================================

class SendDirectMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendDirectMessageRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SendDirectMessageRequest, _impl_._has_bits_);
  static const ::sro::character::CharacterTarget& target(const SendDirectMessageRequest* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sro::chat::ChatMessage& chat_message(const SendDirectMessageRequest* msg);
  static void set_has_chat_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sro::character::CharacterTarget&
SendDirectMessageRequest::_Internal::target(const SendDirectMessageRequest* msg) {
  return *msg->_impl_.target_;
}
const ::sro::chat::ChatMessage&
SendDirectMessageRequest::_Internal::chat_message(const SendDirectMessageRequest* msg) {
  return *msg->_impl_.chat_message_;
}
void SendDirectMessageRequest::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SendDirectMessageRequest::SendDirectMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.SendDirectMessageRequest)
}
SendDirectMessageRequest::SendDirectMessageRequest(const SendDirectMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendDirectMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.chat_message_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::sro::character::CharacterTarget(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.chat_message_ = new ::sro::chat::ChatMessage(*from._impl_.chat_message_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.SendDirectMessageRequest)
}

inline void SendDirectMessageRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.chat_message_){nullptr}
  };
}

SendDirectMessageRequest::~SendDirectMessageRequest() {
  // @@protoc_insertion_point(destructor:sro.chat.SendDirectMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendDirectMessageRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.chat_message_;
}

void SendDirectMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendDirectMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.SendDirectMessageRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.chat_message_ != nullptr);
      _impl_.chat_message_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendDirectMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sro.character.CharacterTarget target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .sro.chat.ChatMessage chat_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SendDirectMessageRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.SendDirectMessageRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.character.CharacterTarget target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .sro.chat.ChatMessage chat_message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chat_message(this),
        _Internal::chat_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.SendDirectMessageRequest)
  return target;
}

::size_t SendDirectMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.SendDirectMessageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sro.character.CharacterTarget target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // .sro.chat.ChatMessage chat_message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chat_message_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendDirectMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendDirectMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendDirectMessageRequest::GetClassData() const { return &_class_data_; }


void SendDirectMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendDirectMessageRequest*>(&to_msg);
  auto& from = static_cast<const SendDirectMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.SendDirectMessageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::sro::character::CharacterTarget::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chat_message()->::sro::chat::ChatMessage::MergeFrom(
          from._internal_chat_message());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendDirectMessageRequest::CopyFrom(const SendDirectMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.SendDirectMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDirectMessageRequest::IsInitialized() const {
  return true;
}

void SendDirectMessageRequest::InternalSwap(SendDirectMessageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendDirectMessageRequest, _impl_.chat_message_)
      + sizeof(SendDirectMessageRequest::_impl_.chat_message_)
      - PROTOBUF_FIELD_OFFSET(SendDirectMessageRequest, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendDirectMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[8]);
}
// ===================================================================

class UpdateChatChannelRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_._oneof_case_);
};

UpdateChatChannelRequest::UpdateChatChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.UpdateChatChannelRequest)
}
UpdateChatChannelRequest::UpdateChatChannelRequest(const UpdateChatChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateChatChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_dimension_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  clear_has_optional_name();
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  clear_has_optional_dimension();
  switch (from.optional_dimension_case()) {
    case kDimension: {
      _this->_internal_set_dimension(from._internal_dimension());
      break;
    }
    case OPTIONAL_DIMENSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.UpdateChatChannelRequest)
}

inline void UpdateChatChannelRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) { ::uint64_t{0u} }

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_dimension_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_name();
  clear_has_optional_dimension();
}

UpdateChatChannelRequest::~UpdateChatChannelRequest() {
  // @@protoc_insertion_point(destructor:sro.chat.UpdateChatChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateChatChannelRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (has_optional_dimension()) {
    clear_optional_dimension();
  }
}

void UpdateChatChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateChatChannelRequest::clear_optional_name() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.UpdateChatChannelRequest)
  switch (optional_name_case()) {
    case kName: {
      _impl_.optional_name_.name_.Destroy();
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}

void UpdateChatChannelRequest::clear_optional_dimension() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.UpdateChatChannelRequest)
  switch (optional_dimension_case()) {
    case kDimension: {
      _impl_.optional_dimension_.dimension_.Destroy();
      break;
    }
    case OPTIONAL_DIMENSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_DIMENSION_NOT_SET;
}


void UpdateChatChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.UpdateChatChannelRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_ = ::uint64_t{0u};
  clear_optional_name();
  clear_optional_dimension();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateChatChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.UpdateChatChannelRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dimension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dimension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.UpdateChatChannelRequest.dimension"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateChatChannelRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.UpdateChatChannelRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_channel_id(), target);
  }

  // string name = 2;
  if (optional_name_case() == kName) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.UpdateChatChannelRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string dimension = 3;
  if (optional_dimension_case() == kDimension) {
    const std::string& _s = this->_internal_dimension();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.UpdateChatChannelRequest.dimension");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.UpdateChatChannelRequest)
  return target;
}

::size_t UpdateChatChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.UpdateChatChannelRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_channel_id());
  }

  switch (optional_name_case()) {
    // string name = 2;
    case kName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (optional_dimension_case()) {
    // string dimension = 3;
    case kDimension: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dimension());
      break;
    }
    case OPTIONAL_DIMENSION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateChatChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateChatChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateChatChannelRequest::GetClassData() const { return &_class_data_; }


void UpdateChatChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateChatChannelRequest*>(&to_msg);
  auto& from = static_cast<const UpdateChatChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.UpdateChatChannelRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.optional_dimension_case()) {
    case kDimension: {
      _this->_internal_set_dimension(from._internal_dimension());
      break;
    }
    case OPTIONAL_DIMENSION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateChatChannelRequest::CopyFrom(const UpdateChatChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.UpdateChatChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatChannelRequest::IsInitialized() const {
  return true;
}

void UpdateChatChannelRequest::InternalSwap(UpdateChatChannelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.channel_id_, other->_impl_.channel_id_);
  swap(_impl_.optional_name_, other->_impl_.optional_name_);
  swap(_impl_.optional_dimension_, other->_impl_.optional_dimension_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateChatChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::chat::RequestSetChannelAuth*
Arena::CreateMaybeMessage< ::sro::chat::RequestSetChannelAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::RequestSetChannelAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::RequestChatChannelAuthChange*
Arena::CreateMaybeMessage< ::sro::chat::RequestChatChannelAuthChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::RequestChatChannelAuthChange >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ChatChannel*
Arena::CreateMaybeMessage< ::sro::chat::ChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ChatChannels*
Arena::CreateMaybeMessage< ::sro::chat::ChatChannels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatChannels >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::CreateChannelMessage*
Arena::CreateMaybeMessage< ::sro::chat::CreateChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::CreateChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ChatChannelTarget*
Arena::CreateMaybeMessage< ::sro::chat::ChatChannelTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatChannelTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ChatMessage*
Arena::CreateMaybeMessage< ::sro::chat::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::SendChatMessageRequest*
Arena::CreateMaybeMessage< ::sro::chat::SendChatMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::SendChatMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::SendDirectMessageRequest*
Arena::CreateMaybeMessage< ::sro::chat::SendDirectMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::SendDirectMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::UpdateChatChannelRequest*
Arena::CreateMaybeMessage< ::sro::chat::UpdateChatChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::UpdateChatChannelRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
