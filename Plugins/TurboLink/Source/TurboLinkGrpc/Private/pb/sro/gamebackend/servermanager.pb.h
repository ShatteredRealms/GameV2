#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4582) // 'type': constructor is not implicitly called
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/gamebackend/servermanager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sro_2fgamebackend_2fservermanager_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sro_2fgamebackend_2fservermanager_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sro_2fgamebackend_2fservermanager_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sro_2fgamebackend_2fservermanager_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_sro_2fgamebackend_2fservermanager_2eproto;
namespace sro {
namespace gamebackend {
class CreateDimensionRequest;
struct CreateDimensionRequestDefaultTypeInternal;
extern CreateDimensionRequestDefaultTypeInternal _CreateDimensionRequest_default_instance_;
class CreateMapRequest;
struct CreateMapRequestDefaultTypeInternal;
extern CreateMapRequestDefaultTypeInternal _CreateMapRequest_default_instance_;
class Dimension;
struct DimensionDefaultTypeInternal;
extern DimensionDefaultTypeInternal _Dimension_default_instance_;
class DimensionTarget;
struct DimensionTargetDefaultTypeInternal;
extern DimensionTargetDefaultTypeInternal _DimensionTarget_default_instance_;
class Dimensions;
struct DimensionsDefaultTypeInternal;
extern DimensionsDefaultTypeInternal _Dimensions_default_instance_;
class DuplicateDimensionRequest;
struct DuplicateDimensionRequestDefaultTypeInternal;
extern DuplicateDimensionRequestDefaultTypeInternal _DuplicateDimensionRequest_default_instance_;
class EditDimensionRequest;
struct EditDimensionRequestDefaultTypeInternal;
extern EditDimensionRequestDefaultTypeInternal _EditDimensionRequest_default_instance_;
class EditMapRequest;
struct EditMapRequestDefaultTypeInternal;
extern EditMapRequestDefaultTypeInternal _EditMapRequest_default_instance_;
class Map;
struct MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class MapTarget;
struct MapTargetDefaultTypeInternal;
extern MapTargetDefaultTypeInternal _MapTarget_default_instance_;
class Maps;
struct MapsDefaultTypeInternal;
extern MapsDefaultTypeInternal _Maps_default_instance_;
}  // namespace gamebackend
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template <>
::sro::gamebackend::CreateDimensionRequest* Arena::CreateMaybeMessage<::sro::gamebackend::CreateDimensionRequest>(Arena*);
template <>
::sro::gamebackend::CreateMapRequest* Arena::CreateMaybeMessage<::sro::gamebackend::CreateMapRequest>(Arena*);
template <>
::sro::gamebackend::Dimension* Arena::CreateMaybeMessage<::sro::gamebackend::Dimension>(Arena*);
template <>
::sro::gamebackend::DimensionTarget* Arena::CreateMaybeMessage<::sro::gamebackend::DimensionTarget>(Arena*);
template <>
::sro::gamebackend::Dimensions* Arena::CreateMaybeMessage<::sro::gamebackend::Dimensions>(Arena*);
template <>
::sro::gamebackend::DuplicateDimensionRequest* Arena::CreateMaybeMessage<::sro::gamebackend::DuplicateDimensionRequest>(Arena*);
template <>
::sro::gamebackend::EditDimensionRequest* Arena::CreateMaybeMessage<::sro::gamebackend::EditDimensionRequest>(Arena*);
template <>
::sro::gamebackend::EditMapRequest* Arena::CreateMaybeMessage<::sro::gamebackend::EditMapRequest>(Arena*);
template <>
::sro::gamebackend::Map* Arena::CreateMaybeMessage<::sro::gamebackend::Map>(Arena*);
template <>
::sro::gamebackend::MapTarget* Arena::CreateMaybeMessage<::sro::gamebackend::MapTarget>(Arena*);
template <>
::sro::gamebackend::Maps* Arena::CreateMaybeMessage<::sro::gamebackend::Maps>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace sro {
namespace gamebackend {

// ===================================================================


// -------------------------------------------------------------------

class DimensionTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.DimensionTarget) */ {
 public:
  inline DimensionTarget() : DimensionTarget(nullptr) {}
  ~DimensionTarget() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DimensionTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DimensionTarget(const DimensionTarget& from);
  DimensionTarget(DimensionTarget&& from) noexcept
    : DimensionTarget() {
    *this = ::std::move(from);
  }

  inline DimensionTarget& operator=(const DimensionTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimensionTarget& operator=(DimensionTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DimensionTarget& default_instance() {
    return *internal_default_instance();
  }
  enum FindByCase {
    kId = 1,
    kName = 2,
    FINDBY_NOT_SET = 0,
  };

  static inline const DimensionTarget* internal_default_instance() {
    return reinterpret_cast<const DimensionTarget*>(
               &_DimensionTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DimensionTarget& a, DimensionTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(DimensionTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DimensionTarget* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DimensionTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DimensionTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DimensionTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DimensionTarget& from) {
    DimensionTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.DimensionTarget";
  }
  protected:
  explicit DimensionTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string id = 1;
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  void clear_FindBy();
  FindByCase FindBy_case() const;
  // @@protoc_insertion_point(class_scope:sro.gamebackend.DimensionTarget)
 private:
  class _Internal;
  void set_has_id();
  void set_has_name();

  inline bool has_FindBy() const;
  inline void clear_has_FindBy();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union FindByUnion {
      constexpr FindByUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } FindBy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class MapTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.MapTarget) */ {
 public:
  inline MapTarget() : MapTarget(nullptr) {}
  ~MapTarget() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MapTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapTarget(const MapTarget& from);
  MapTarget(MapTarget&& from) noexcept
    : MapTarget() {
    *this = ::std::move(from);
  }

  inline MapTarget& operator=(const MapTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTarget& operator=(MapTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapTarget& default_instance() {
    return *internal_default_instance();
  }
  enum FindByCase {
    kId = 1,
    kName = 2,
    FINDBY_NOT_SET = 0,
  };

  static inline const MapTarget* internal_default_instance() {
    return reinterpret_cast<const MapTarget*>(
               &_MapTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MapTarget& a, MapTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTarget* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapTarget& from) {
    MapTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.MapTarget";
  }
  protected:
  explicit MapTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string id = 1;
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  void clear_FindBy();
  FindByCase FindBy_case() const;
  // @@protoc_insertion_point(class_scope:sro.gamebackend.MapTarget)
 private:
  class _Internal;
  void set_has_id();
  void set_has_name();

  inline bool has_FindBy() const;
  inline void clear_has_FindBy();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union FindByUnion {
      constexpr FindByUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } FindBy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class CreateDimensionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.CreateDimensionRequest) */ {
 public:
  inline CreateDimensionRequest() : CreateDimensionRequest(nullptr) {}
  ~CreateDimensionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateDimensionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDimensionRequest(const CreateDimensionRequest& from);
  CreateDimensionRequest(CreateDimensionRequest&& from) noexcept
    : CreateDimensionRequest() {
    *this = ::std::move(from);
  }

  inline CreateDimensionRequest& operator=(const CreateDimensionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDimensionRequest& operator=(CreateDimensionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDimensionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDimensionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDimensionRequest*>(
               &_CreateDimensionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateDimensionRequest& a, CreateDimensionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDimensionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDimensionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDimensionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDimensionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDimensionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDimensionRequest& from) {
    CreateDimensionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDimensionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.CreateDimensionRequest";
  }
  protected:
  explicit CreateDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdsFieldNumber = 3,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kLocationFieldNumber = 4,
  };
  // repeated string map_ids = 3;
  int map_ids_size() const;
  private:
  int _internal_map_ids_size() const;

  public:
  void clear_map_ids() ;
  const std::string& map_ids(int index) const;
  std::string* mutable_map_ids(int index);
  void set_map_ids(int index, const std::string& value);
  void set_map_ids(int index, std::string&& value);
  void set_map_ids(int index, const char* value);
  void set_map_ids(int index, const char* value, std::size_t size);
  void set_map_ids(int index, absl::string_view value);
  std::string* add_map_ids();
  void add_map_ids(const std::string& value);
  void add_map_ids(std::string&& value);
  void add_map_ids(const char* value);
  void add_map_ids(const char* value, std::size_t size);
  void add_map_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map_ids();

  private:
  const std::string& _internal_map_ids(int index) const;
  std::string* _internal_add_map_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_map_ids();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string location = 4;
  void clear_location() ;
  const std::string& location() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* ptr);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // @@protoc_insertion_point(class_scope:sro.gamebackend.CreateDimensionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class DuplicateDimensionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.DuplicateDimensionRequest) */ {
 public:
  inline DuplicateDimensionRequest() : DuplicateDimensionRequest(nullptr) {}
  ~DuplicateDimensionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DuplicateDimensionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DuplicateDimensionRequest(const DuplicateDimensionRequest& from);
  DuplicateDimensionRequest(DuplicateDimensionRequest&& from) noexcept
    : DuplicateDimensionRequest() {
    *this = ::std::move(from);
  }

  inline DuplicateDimensionRequest& operator=(const DuplicateDimensionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DuplicateDimensionRequest& operator=(DuplicateDimensionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DuplicateDimensionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DuplicateDimensionRequest* internal_default_instance() {
    return reinterpret_cast<const DuplicateDimensionRequest*>(
               &_DuplicateDimensionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DuplicateDimensionRequest& a, DuplicateDimensionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DuplicateDimensionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DuplicateDimensionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DuplicateDimensionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DuplicateDimensionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DuplicateDimensionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DuplicateDimensionRequest& from) {
    DuplicateDimensionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DuplicateDimensionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.DuplicateDimensionRequest";
  }
  protected:
  explicit DuplicateDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTargetFieldNumber = 1,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .sro.gamebackend.DimensionTarget target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::sro::gamebackend::DimensionTarget& target() const;
  PROTOBUF_NODISCARD ::sro::gamebackend::DimensionTarget* release_target();
  ::sro::gamebackend::DimensionTarget* mutable_target();
  void set_allocated_target(::sro::gamebackend::DimensionTarget* target);
  private:
  const ::sro::gamebackend::DimensionTarget& _internal_target() const;
  ::sro::gamebackend::DimensionTarget* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::sro::gamebackend::DimensionTarget* target);
  ::sro::gamebackend::DimensionTarget* unsafe_arena_release_target();
  // @@protoc_insertion_point(class_scope:sro.gamebackend.DuplicateDimensionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::sro::gamebackend::DimensionTarget* target_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class EditDimensionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.EditDimensionRequest) */ {
 public:
  inline EditDimensionRequest() : EditDimensionRequest(nullptr) {}
  ~EditDimensionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditDimensionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditDimensionRequest(const EditDimensionRequest& from);
  EditDimensionRequest(EditDimensionRequest&& from) noexcept
    : EditDimensionRequest() {
    *this = ::std::move(from);
  }

  inline EditDimensionRequest& operator=(const EditDimensionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditDimensionRequest& operator=(EditDimensionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditDimensionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalNameCase {
    kName = 2,
    OPTIONAL_NAME_NOT_SET = 0,
  };

  enum OptionalVersionCase {
    kVersion = 3,
    OPTIONAL_VERSION_NOT_SET = 0,
  };

  enum OptionalLocationCase {
    kLocation = 8,
    OPTIONAL_LOCATION_NOT_SET = 0,
  };

  static inline const EditDimensionRequest* internal_default_instance() {
    return reinterpret_cast<const EditDimensionRequest*>(
               &_EditDimensionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EditDimensionRequest& a, EditDimensionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EditDimensionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditDimensionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditDimensionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditDimensionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditDimensionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EditDimensionRequest& from) {
    EditDimensionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditDimensionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.EditDimensionRequest";
  }
  protected:
  explicit EditDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdsFieldNumber = 5,
    kTargetFieldNumber = 1,
    kEditMapsFieldNumber = 4,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kLocationFieldNumber = 8,
  };
  // repeated string map_ids = 5;
  int map_ids_size() const;
  private:
  int _internal_map_ids_size() const;

  public:
  void clear_map_ids() ;
  const std::string& map_ids(int index) const;
  std::string* mutable_map_ids(int index);
  void set_map_ids(int index, const std::string& value);
  void set_map_ids(int index, std::string&& value);
  void set_map_ids(int index, const char* value);
  void set_map_ids(int index, const char* value, std::size_t size);
  void set_map_ids(int index, absl::string_view value);
  std::string* add_map_ids();
  void add_map_ids(const std::string& value);
  void add_map_ids(std::string&& value);
  void add_map_ids(const char* value);
  void add_map_ids(const char* value, std::size_t size);
  void add_map_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map_ids();

  private:
  const std::string& _internal_map_ids(int index) const;
  std::string* _internal_add_map_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_map_ids();

  public:
  // .sro.gamebackend.DimensionTarget target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::sro::gamebackend::DimensionTarget& target() const;
  PROTOBUF_NODISCARD ::sro::gamebackend::DimensionTarget* release_target();
  ::sro::gamebackend::DimensionTarget* mutable_target();
  void set_allocated_target(::sro::gamebackend::DimensionTarget* target);
  private:
  const ::sro::gamebackend::DimensionTarget& _internal_target() const;
  ::sro::gamebackend::DimensionTarget* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::sro::gamebackend::DimensionTarget* target);
  ::sro::gamebackend::DimensionTarget* unsafe_arena_release_target();
  // bool edit_maps = 4;
  void clear_edit_maps() ;
  bool edit_maps() const;
  void set_edit_maps(bool value);

  private:
  bool _internal_edit_maps() const;
  void _internal_set_edit_maps(bool value);

  public:
  // string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 3;
  bool has_version() const;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string location = 8;
  bool has_location() const;
  void clear_location() ;
  const std::string& location() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* ptr);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  void clear_optional_name();
  OptionalNameCase optional_name_case() const;
  void clear_optional_version();
  OptionalVersionCase optional_version_case() const;
  void clear_optional_location();
  OptionalLocationCase optional_location_case() const;
  // @@protoc_insertion_point(class_scope:sro.gamebackend.EditDimensionRequest)
 private:
  class _Internal;
  void set_has_name();
  void set_has_version();
  void set_has_location();

  inline bool has_optional_name() const;
  inline void clear_has_optional_name();

  inline bool has_optional_version() const;
  inline void clear_has_optional_version();

  inline bool has_optional_location() const;
  inline void clear_has_optional_location();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_ids_;
    ::sro::gamebackend::DimensionTarget* target_;
    bool edit_maps_;
    union OptionalNameUnion {
      constexpr OptionalNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } optional_name_;
    union OptionalVersionUnion {
      constexpr OptionalVersionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    } optional_version_;
    union OptionalLocationUnion {
      constexpr OptionalLocationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    } optional_location_;
    ::uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class Dimension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.Dimension) */ {
 public:
  inline Dimension() : Dimension(nullptr) {}
  ~Dimension() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Dimension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dimension(const Dimension& from);
  Dimension(Dimension&& from) noexcept
    : Dimension() {
    *this = ::std::move(from);
  }

  inline Dimension& operator=(const Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimension& operator=(Dimension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dimension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dimension* internal_default_instance() {
    return reinterpret_cast<const Dimension*>(
               &_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Dimension& a, Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dimension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dimension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dimension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dimension& from) {
    Dimension::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.Dimension";
  }
  protected:
  explicit Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kLocationFieldNumber = 6,
  };
  // repeated .sro.gamebackend.Map maps = 4;
  int maps_size() const;
  private:
  int _internal_maps_size() const;

  public:
  void clear_maps() ;
  ::sro::gamebackend::Map* mutable_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map >*
      mutable_maps();
  private:
  const ::sro::gamebackend::Map& _internal_maps(int index) const;
  ::sro::gamebackend::Map* _internal_add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Map>& _internal_maps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Map>* _internal_mutable_maps();
  public:
  const ::sro::gamebackend::Map& maps(int index) const;
  ::sro::gamebackend::Map* add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map >&
      maps() const;
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 3;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string location = 6;
  void clear_location() ;
  const std::string& location() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* ptr);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // @@protoc_insertion_point(class_scope:sro.gamebackend.Dimension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map > maps_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class Dimensions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.Dimensions) */ {
 public:
  inline Dimensions() : Dimensions(nullptr) {}
  ~Dimensions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Dimensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dimensions(const Dimensions& from);
  Dimensions(Dimensions&& from) noexcept
    : Dimensions() {
    *this = ::std::move(from);
  }

  inline Dimensions& operator=(const Dimensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimensions& operator=(Dimensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dimensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dimensions* internal_default_instance() {
    return reinterpret_cast<const Dimensions*>(
               &_Dimensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Dimensions& a, Dimensions& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dimensions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dimensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dimensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dimensions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dimensions& from) {
    Dimensions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimensions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.Dimensions";
  }
  protected:
  explicit Dimensions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 1,
  };
  // repeated .sro.gamebackend.Dimension dimensions = 1;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;

  public:
  void clear_dimensions() ;
  ::sro::gamebackend::Dimension* mutable_dimensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Dimension >*
      mutable_dimensions();
  private:
  const ::sro::gamebackend::Dimension& _internal_dimensions(int index) const;
  ::sro::gamebackend::Dimension* _internal_add_dimensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Dimension>& _internal_dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Dimension>* _internal_mutable_dimensions();
  public:
  const ::sro::gamebackend::Dimension& dimensions(int index) const;
  ::sro::gamebackend::Dimension* add_dimensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Dimension >&
      dimensions() const;
  // @@protoc_insertion_point(class_scope:sro.gamebackend.Dimensions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Dimension > dimensions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class CreateMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.CreateMapRequest) */ {
 public:
  inline CreateMapRequest() : CreateMapRequest(nullptr) {}
  ~CreateMapRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateMapRequest(const CreateMapRequest& from);
  CreateMapRequest(CreateMapRequest&& from) noexcept
    : CreateMapRequest() {
    *this = ::std::move(from);
  }

  inline CreateMapRequest& operator=(const CreateMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMapRequest& operator=(CreateMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateMapRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMapRequest*>(
               &_CreateMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateMapRequest& a, CreateMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMapRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateMapRequest& from) {
    CreateMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.CreateMapRequest";
  }
  protected:
  explicit CreateMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kMaxPlayersFieldNumber = 3,
    kInstancedFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string path = 2;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // uint64 max_players = 3;
  void clear_max_players() ;
  ::uint64_t max_players() const;
  void set_max_players(::uint64_t value);

  private:
  ::uint64_t _internal_max_players() const;
  void _internal_set_max_players(::uint64_t value);

  public:
  // bool instanced = 4;
  void clear_instanced() ;
  bool instanced() const;
  void set_instanced(bool value);

  private:
  bool _internal_instanced() const;
  void _internal_set_instanced(bool value);

  public:
  // @@protoc_insertion_point(class_scope:sro.gamebackend.CreateMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::uint64_t max_players_;
    bool instanced_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class Map final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  ~Map() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Map& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Map& from) {
    Map::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.Map";
  }
  protected:
  explicit Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kPathFieldNumber = 3,
    kMaxPlayersFieldNumber = 4,
    kInstancedFieldNumber = 5,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string path = 3;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // uint64 max_players = 4;
  void clear_max_players() ;
  ::uint64_t max_players() const;
  void set_max_players(::uint64_t value);

  private:
  ::uint64_t _internal_max_players() const;
  void _internal_set_max_players(::uint64_t value);

  public:
  // bool instanced = 5;
  void clear_instanced() ;
  bool instanced() const;
  void set_instanced(bool value);

  private:
  bool _internal_instanced() const;
  void _internal_set_instanced(bool value);

  public:
  // @@protoc_insertion_point(class_scope:sro.gamebackend.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::uint64_t max_players_;
    bool instanced_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class EditMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.EditMapRequest) */ {
 public:
  inline EditMapRequest() : EditMapRequest(nullptr) {}
  ~EditMapRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditMapRequest(const EditMapRequest& from);
  EditMapRequest(EditMapRequest&& from) noexcept
    : EditMapRequest() {
    *this = ::std::move(from);
  }

  inline EditMapRequest& operator=(const EditMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditMapRequest& operator=(EditMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditMapRequest& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalNameCase {
    kName = 2,
    OPTIONAL_NAME_NOT_SET = 0,
  };

  enum OptionalPathCase {
    kPath = 3,
    OPTIONAL_PATH_NOT_SET = 0,
  };

  enum OptionalMaxPlayersCase {
    kMaxPlayers = 4,
    OPTIONAL_MAX_PLAYERS_NOT_SET = 0,
  };

  enum OptionalInstancedCase {
    kInstanced = 5,
    OPTIONAL_INSTANCED_NOT_SET = 0,
  };

  static inline const EditMapRequest* internal_default_instance() {
    return reinterpret_cast<const EditMapRequest*>(
               &_EditMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EditMapRequest& a, EditMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EditMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditMapRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EditMapRequest& from) {
    EditMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.EditMapRequest";
  }
  protected:
  explicit EditMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kNameFieldNumber = 2,
    kPathFieldNumber = 3,
    kMaxPlayersFieldNumber = 4,
    kInstancedFieldNumber = 5,
  };
  // .sro.gamebackend.MapTarget target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::sro::gamebackend::MapTarget& target() const;
  PROTOBUF_NODISCARD ::sro::gamebackend::MapTarget* release_target();
  ::sro::gamebackend::MapTarget* mutable_target();
  void set_allocated_target(::sro::gamebackend::MapTarget* target);
  private:
  const ::sro::gamebackend::MapTarget& _internal_target() const;
  ::sro::gamebackend::MapTarget* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::sro::gamebackend::MapTarget* target);
  ::sro::gamebackend::MapTarget* unsafe_arena_release_target();
  // string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string path = 3;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // uint64 max_players = 4;
  bool has_max_players() const;
  void clear_max_players() ;
  ::uint64_t max_players() const;
  void set_max_players(::uint64_t value);

  private:
  ::uint64_t _internal_max_players() const;
  void _internal_set_max_players(::uint64_t value);

  public:
  // bool instanced = 5;
  bool has_instanced() const;
  void clear_instanced() ;
  bool instanced() const;
  void set_instanced(bool value);

  private:
  bool _internal_instanced() const;
  void _internal_set_instanced(bool value);

  public:
  void clear_optional_name();
  OptionalNameCase optional_name_case() const;
  void clear_optional_path();
  OptionalPathCase optional_path_case() const;
  void clear_optional_max_players();
  OptionalMaxPlayersCase optional_max_players_case() const;
  void clear_optional_instanced();
  OptionalInstancedCase optional_instanced_case() const;
  // @@protoc_insertion_point(class_scope:sro.gamebackend.EditMapRequest)
 private:
  class _Internal;
  void set_has_name();
  void set_has_path();
  void set_has_max_players();
  void set_has_instanced();

  inline bool has_optional_name() const;
  inline void clear_has_optional_name();

  inline bool has_optional_path() const;
  inline void clear_has_optional_path();

  inline bool has_optional_max_players() const;
  inline void clear_has_optional_max_players();

  inline bool has_optional_instanced() const;
  inline void clear_has_optional_instanced();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::sro::gamebackend::MapTarget* target_;
    union OptionalNameUnion {
      constexpr OptionalNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } optional_name_;
    union OptionalPathUnion {
      constexpr OptionalPathUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    } optional_path_;
    union OptionalMaxPlayersUnion {
      constexpr OptionalMaxPlayersUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint64_t max_players_;
    } optional_max_players_;
    union OptionalInstancedUnion {
      constexpr OptionalInstancedUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool instanced_;
    } optional_instanced_;
    ::uint32_t _oneof_case_[4];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};// -------------------------------------------------------------------

class Maps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gamebackend.Maps) */ {
 public:
  inline Maps() : Maps(nullptr) {}
  ~Maps() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Maps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Maps(const Maps& from);
  Maps(Maps&& from) noexcept
    : Maps() {
    *this = ::std::move(from);
  }

  inline Maps& operator=(const Maps& from) {
    CopyFrom(from);
    return *this;
  }
  inline Maps& operator=(Maps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Maps& default_instance() {
    return *internal_default_instance();
  }
  static inline const Maps* internal_default_instance() {
    return reinterpret_cast<const Maps*>(
               &_Maps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Maps& a, Maps& b) {
    a.Swap(&b);
  }
  inline void Swap(Maps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Maps* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Maps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Maps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Maps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Maps& from) {
    Maps::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Maps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gamebackend.Maps";
  }
  protected:
  explicit Maps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 1,
  };
  // repeated .sro.gamebackend.Map maps = 1;
  int maps_size() const;
  private:
  int _internal_maps_size() const;

  public:
  void clear_maps() ;
  ::sro::gamebackend::Map* mutable_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map >*
      mutable_maps();
  private:
  const ::sro::gamebackend::Map& _internal_maps(int index) const;
  ::sro::gamebackend::Map* _internal_add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Map>& _internal_maps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Map>* _internal_mutable_maps();
  public:
  const ::sro::gamebackend::Map& maps(int index) const;
  ::sro::gamebackend::Map* add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map >&
      maps() const;
  // @@protoc_insertion_point(class_scope:sro.gamebackend.Maps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map > maps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgamebackend_2fservermanager_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DimensionTarget

// string id = 1;
inline bool DimensionTarget::has_id() const {
  return FindBy_case() == kId;
}
inline void DimensionTarget::set_has_id() {
  _impl_._oneof_case_[0] = kId;
}
inline void DimensionTarget::clear_id() {
  if (FindBy_case() == kId) {
    _impl_.FindBy_.id_.Destroy();
    clear_has_FindBy();
  }
}
inline const std::string& DimensionTarget::id() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.DimensionTarget.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DimensionTarget::set_id(Arg_&& arg,
                                                     Args_... args) {
  if (FindBy_case() != kId) {
    clear_FindBy();

    set_has_id();
    _impl_.FindBy_.id_.InitDefault();
  }
  _impl_.FindBy_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.DimensionTarget.id)
}
inline std::string* DimensionTarget::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.DimensionTarget.id)
  return _s;
}
inline const std::string& DimensionTarget::_internal_id() const {
  if (FindBy_case() != kId) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.FindBy_.id_.Get();
}
inline void DimensionTarget::_internal_set_id(const std::string& value) {
  if (FindBy_case() != kId) {
    clear_FindBy();

    set_has_id();
    _impl_.FindBy_.id_.InitDefault();
  }


  _impl_.FindBy_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* DimensionTarget::_internal_mutable_id() {
  if (FindBy_case() != kId) {
    clear_FindBy();

    set_has_id();
    _impl_.FindBy_.id_.InitDefault();
  }
  return _impl_.FindBy_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* DimensionTarget::release_id() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.DimensionTarget.id)
  if (FindBy_case() != kId) {
    return nullptr;
  }
  clear_has_FindBy();
  return _impl_.FindBy_.id_.Release();
}
inline void DimensionTarget::set_allocated_id(std::string* value) {
  if (has_FindBy()) {
    clear_FindBy();
  }
  if (value != nullptr) {
    set_has_id();
    _impl_.FindBy_.id_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.DimensionTarget.id)
}

// string name = 2;
inline bool DimensionTarget::has_name() const {
  return FindBy_case() == kName;
}
inline void DimensionTarget::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void DimensionTarget::clear_name() {
  if (FindBy_case() == kName) {
    _impl_.FindBy_.name_.Destroy();
    clear_has_FindBy();
  }
}
inline const std::string& DimensionTarget::name() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.DimensionTarget.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DimensionTarget::set_name(Arg_&& arg,
                                                     Args_... args) {
  if (FindBy_case() != kName) {
    clear_FindBy();

    set_has_name();
    _impl_.FindBy_.name_.InitDefault();
  }
  _impl_.FindBy_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.DimensionTarget.name)
}
inline std::string* DimensionTarget::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.DimensionTarget.name)
  return _s;
}
inline const std::string& DimensionTarget::_internal_name() const {
  if (FindBy_case() != kName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.FindBy_.name_.Get();
}
inline void DimensionTarget::_internal_set_name(const std::string& value) {
  if (FindBy_case() != kName) {
    clear_FindBy();

    set_has_name();
    _impl_.FindBy_.name_.InitDefault();
  }


  _impl_.FindBy_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DimensionTarget::_internal_mutable_name() {
  if (FindBy_case() != kName) {
    clear_FindBy();

    set_has_name();
    _impl_.FindBy_.name_.InitDefault();
  }
  return _impl_.FindBy_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* DimensionTarget::release_name() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.DimensionTarget.name)
  if (FindBy_case() != kName) {
    return nullptr;
  }
  clear_has_FindBy();
  return _impl_.FindBy_.name_.Release();
}
inline void DimensionTarget::set_allocated_name(std::string* value) {
  if (has_FindBy()) {
    clear_FindBy();
  }
  if (value != nullptr) {
    set_has_name();
    _impl_.FindBy_.name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.DimensionTarget.name)
}

inline bool DimensionTarget::has_FindBy() const {
  return FindBy_case() != FINDBY_NOT_SET;
}
inline void DimensionTarget::clear_has_FindBy() {
  _impl_._oneof_case_[0] = FINDBY_NOT_SET;
}
inline DimensionTarget::FindByCase DimensionTarget::FindBy_case() const {
  return DimensionTarget::FindByCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MapTarget

// string id = 1;
inline bool MapTarget::has_id() const {
  return FindBy_case() == kId;
}
inline void MapTarget::set_has_id() {
  _impl_._oneof_case_[0] = kId;
}
inline void MapTarget::clear_id() {
  if (FindBy_case() == kId) {
    _impl_.FindBy_.id_.Destroy();
    clear_has_FindBy();
  }
}
inline const std::string& MapTarget::id() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.MapTarget.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MapTarget::set_id(Arg_&& arg,
                                                     Args_... args) {
  if (FindBy_case() != kId) {
    clear_FindBy();

    set_has_id();
    _impl_.FindBy_.id_.InitDefault();
  }
  _impl_.FindBy_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.MapTarget.id)
}
inline std::string* MapTarget::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.MapTarget.id)
  return _s;
}
inline const std::string& MapTarget::_internal_id() const {
  if (FindBy_case() != kId) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.FindBy_.id_.Get();
}
inline void MapTarget::_internal_set_id(const std::string& value) {
  if (FindBy_case() != kId) {
    clear_FindBy();

    set_has_id();
    _impl_.FindBy_.id_.InitDefault();
  }


  _impl_.FindBy_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* MapTarget::_internal_mutable_id() {
  if (FindBy_case() != kId) {
    clear_FindBy();

    set_has_id();
    _impl_.FindBy_.id_.InitDefault();
  }
  return _impl_.FindBy_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* MapTarget::release_id() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.MapTarget.id)
  if (FindBy_case() != kId) {
    return nullptr;
  }
  clear_has_FindBy();
  return _impl_.FindBy_.id_.Release();
}
inline void MapTarget::set_allocated_id(std::string* value) {
  if (has_FindBy()) {
    clear_FindBy();
  }
  if (value != nullptr) {
    set_has_id();
    _impl_.FindBy_.id_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.MapTarget.id)
}

// string name = 2;
inline bool MapTarget::has_name() const {
  return FindBy_case() == kName;
}
inline void MapTarget::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void MapTarget::clear_name() {
  if (FindBy_case() == kName) {
    _impl_.FindBy_.name_.Destroy();
    clear_has_FindBy();
  }
}
inline const std::string& MapTarget::name() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.MapTarget.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MapTarget::set_name(Arg_&& arg,
                                                     Args_... args) {
  if (FindBy_case() != kName) {
    clear_FindBy();

    set_has_name();
    _impl_.FindBy_.name_.InitDefault();
  }
  _impl_.FindBy_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.MapTarget.name)
}
inline std::string* MapTarget::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.MapTarget.name)
  return _s;
}
inline const std::string& MapTarget::_internal_name() const {
  if (FindBy_case() != kName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.FindBy_.name_.Get();
}
inline void MapTarget::_internal_set_name(const std::string& value) {
  if (FindBy_case() != kName) {
    clear_FindBy();

    set_has_name();
    _impl_.FindBy_.name_.InitDefault();
  }


  _impl_.FindBy_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MapTarget::_internal_mutable_name() {
  if (FindBy_case() != kName) {
    clear_FindBy();

    set_has_name();
    _impl_.FindBy_.name_.InitDefault();
  }
  return _impl_.FindBy_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* MapTarget::release_name() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.MapTarget.name)
  if (FindBy_case() != kName) {
    return nullptr;
  }
  clear_has_FindBy();
  return _impl_.FindBy_.name_.Release();
}
inline void MapTarget::set_allocated_name(std::string* value) {
  if (has_FindBy()) {
    clear_FindBy();
  }
  if (value != nullptr) {
    set_has_name();
    _impl_.FindBy_.name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.MapTarget.name)
}

inline bool MapTarget::has_FindBy() const {
  return FindBy_case() != FINDBY_NOT_SET;
}
inline void MapTarget::clear_has_FindBy() {
  _impl_._oneof_case_[0] = FINDBY_NOT_SET;
}
inline MapTarget::FindByCase MapTarget::FindBy_case() const {
  return MapTarget::FindByCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateDimensionRequest

// string name = 1;
inline void CreateDimensionRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateDimensionRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.CreateDimensionRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateDimensionRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.CreateDimensionRequest.name)
}
inline std::string* CreateDimensionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.CreateDimensionRequest.name)
  return _s;
}
inline const std::string& CreateDimensionRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateDimensionRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.CreateDimensionRequest.name)
  return _impl_.name_.Release();
}
inline void CreateDimensionRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.CreateDimensionRequest.name)
}

// string version = 2;
inline void CreateDimensionRequest::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& CreateDimensionRequest::version() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.CreateDimensionRequest.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateDimensionRequest::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.CreateDimensionRequest.version)
}
inline std::string* CreateDimensionRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.CreateDimensionRequest.version)
  return _s;
}
inline const std::string& CreateDimensionRequest::_internal_version() const {
  return _impl_.version_.Get();
}
inline void CreateDimensionRequest::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::release_version() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.CreateDimensionRequest.version)
  return _impl_.version_.Release();
}
inline void CreateDimensionRequest::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.CreateDimensionRequest.version)
}

// repeated string map_ids = 3;
inline int CreateDimensionRequest::_internal_map_ids_size() const {
  return _impl_.map_ids_.size();
}
inline int CreateDimensionRequest::map_ids_size() const {
  return _internal_map_ids_size();
}
inline void CreateDimensionRequest::clear_map_ids() {
  _internal_mutable_map_ids()->Clear();
}
inline std::string* CreateDimensionRequest::add_map_ids() {
  std::string* _s = _internal_add_map_ids();
  // @@protoc_insertion_point(field_add_mutable:sro.gamebackend.CreateDimensionRequest.map_ids)
  return _s;
}
inline const std::string& CreateDimensionRequest::map_ids(int index) const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.CreateDimensionRequest.map_ids)
  return _internal_map_ids(index);
}
inline std::string* CreateDimensionRequest::mutable_map_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.CreateDimensionRequest.map_ids)
  return _internal_mutable_map_ids()->Mutable(index);
}
inline void CreateDimensionRequest::set_map_ids(int index, const std::string& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::set_map_ids(int index, std::string&& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::set_map_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::set_map_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_map_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::set_map_ids(int index, absl::string_view value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(const std::string& value) {
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(std::string&& value) {
  _internal_mutable_map_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(const char* value, std::size_t size) {
  _internal_mutable_map_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(absl::string_view value) {
  _internal_mutable_map_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sro.gamebackend.CreateDimensionRequest.map_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDimensionRequest::map_ids() const {
  // @@protoc_insertion_point(field_list:sro.gamebackend.CreateDimensionRequest.map_ids)
  return _internal_map_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* CreateDimensionRequest::mutable_map_ids() {
  // @@protoc_insertion_point(field_mutable_list:sro.gamebackend.CreateDimensionRequest.map_ids)
  return _internal_mutable_map_ids();
}
inline const std::string& CreateDimensionRequest::_internal_map_ids(int index) const {
  return _internal_map_ids().Get(index);
}
inline std::string* CreateDimensionRequest::_internal_add_map_ids() {
  return _internal_mutable_map_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDimensionRequest::_internal_map_ids() const {
  return _impl_.map_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDimensionRequest::_internal_mutable_map_ids() {
  return &_impl_.map_ids_;
}

// string location = 4;
inline void CreateDimensionRequest::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& CreateDimensionRequest::location() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.CreateDimensionRequest.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateDimensionRequest::set_location(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.CreateDimensionRequest.location)
}
inline std::string* CreateDimensionRequest::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.CreateDimensionRequest.location)
  return _s;
}
inline const std::string& CreateDimensionRequest::_internal_location() const {
  return _impl_.location_.Get();
}
inline void CreateDimensionRequest::_internal_set_location(const std::string& value) {
  ;


  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::_internal_mutable_location() {
  ;
  return _impl_.location_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::release_location() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.CreateDimensionRequest.location)
  return _impl_.location_.Release();
}
inline void CreateDimensionRequest::set_allocated_location(std::string* value) {
  _impl_.location_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.location_.IsDefault()) {
          _impl_.location_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.CreateDimensionRequest.location)
}

// -------------------------------------------------------------------

// DuplicateDimensionRequest

// .sro.gamebackend.DimensionTarget target = 1;
inline bool DuplicateDimensionRequest::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void DuplicateDimensionRequest::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sro::gamebackend::DimensionTarget& DuplicateDimensionRequest::_internal_target() const {
  const ::sro::gamebackend::DimensionTarget* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::gamebackend::DimensionTarget&>(
      ::sro::gamebackend::_DimensionTarget_default_instance_);
}
inline const ::sro::gamebackend::DimensionTarget& DuplicateDimensionRequest::target() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.DuplicateDimensionRequest.target)
  return _internal_target();
}
inline void DuplicateDimensionRequest::unsafe_arena_set_allocated_target(
    ::sro::gamebackend::DimensionTarget* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.gamebackend.DuplicateDimensionRequest.target)
}
inline ::sro::gamebackend::DimensionTarget* DuplicateDimensionRequest::release_target() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::gamebackend::DimensionTarget* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::gamebackend::DimensionTarget* DuplicateDimensionRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.DuplicateDimensionRequest.target)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::gamebackend::DimensionTarget* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::sro::gamebackend::DimensionTarget* DuplicateDimensionRequest::_internal_mutable_target() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::gamebackend::DimensionTarget>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::sro::gamebackend::DimensionTarget* DuplicateDimensionRequest::mutable_target() {
  ::sro::gamebackend::DimensionTarget* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.DuplicateDimensionRequest.target)
  return _msg;
}
inline void DuplicateDimensionRequest::set_allocated_target(::sro::gamebackend::DimensionTarget* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.DuplicateDimensionRequest.target)
}

// string name = 2;
inline void DuplicateDimensionRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DuplicateDimensionRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.DuplicateDimensionRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DuplicateDimensionRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.DuplicateDimensionRequest.name)
}
inline std::string* DuplicateDimensionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.DuplicateDimensionRequest.name)
  return _s;
}
inline const std::string& DuplicateDimensionRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DuplicateDimensionRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DuplicateDimensionRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* DuplicateDimensionRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.DuplicateDimensionRequest.name)
  return _impl_.name_.Release();
}
inline void DuplicateDimensionRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.DuplicateDimensionRequest.name)
}

// -------------------------------------------------------------------

// EditDimensionRequest

// .sro.gamebackend.DimensionTarget target = 1;
inline bool EditDimensionRequest::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void EditDimensionRequest::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sro::gamebackend::DimensionTarget& EditDimensionRequest::_internal_target() const {
  const ::sro::gamebackend::DimensionTarget* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::gamebackend::DimensionTarget&>(
      ::sro::gamebackend::_DimensionTarget_default_instance_);
}
inline const ::sro::gamebackend::DimensionTarget& EditDimensionRequest::target() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditDimensionRequest.target)
  return _internal_target();
}
inline void EditDimensionRequest::unsafe_arena_set_allocated_target(
    ::sro::gamebackend::DimensionTarget* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.gamebackend.EditDimensionRequest.target)
}
inline ::sro::gamebackend::DimensionTarget* EditDimensionRequest::release_target() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::gamebackend::DimensionTarget* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::gamebackend::DimensionTarget* EditDimensionRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.EditDimensionRequest.target)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::gamebackend::DimensionTarget* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::sro::gamebackend::DimensionTarget* EditDimensionRequest::_internal_mutable_target() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::gamebackend::DimensionTarget>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::sro::gamebackend::DimensionTarget* EditDimensionRequest::mutable_target() {
  ::sro::gamebackend::DimensionTarget* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.EditDimensionRequest.target)
  return _msg;
}
inline void EditDimensionRequest::set_allocated_target(::sro::gamebackend::DimensionTarget* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.EditDimensionRequest.target)
}

// string name = 2;
inline bool EditDimensionRequest::has_name() const {
  return optional_name_case() == kName;
}
inline void EditDimensionRequest::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void EditDimensionRequest::clear_name() {
  if (optional_name_case() == kName) {
    _impl_.optional_name_.name_.Destroy();
    clear_has_optional_name();
  }
}
inline const std::string& EditDimensionRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditDimensionRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditDimensionRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }
  _impl_.optional_name_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditDimensionRequest.name)
}
inline std::string* EditDimensionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.EditDimensionRequest.name)
  return _s;
}
inline const std::string& EditDimensionRequest::_internal_name() const {
  if (optional_name_case() != kName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_name_.name_.Get();
}
inline void EditDimensionRequest::_internal_set_name(const std::string& value) {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }


  _impl_.optional_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::_internal_mutable_name() {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }
  return _impl_.optional_name_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.EditDimensionRequest.name)
  if (optional_name_case() != kName) {
    return nullptr;
  }
  clear_has_optional_name();
  return _impl_.optional_name_.name_.Release();
}
inline void EditDimensionRequest::set_allocated_name(std::string* value) {
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (value != nullptr) {
    set_has_name();
    _impl_.optional_name_.name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.EditDimensionRequest.name)
}

// string version = 3;
inline bool EditDimensionRequest::has_version() const {
  return optional_version_case() == kVersion;
}
inline void EditDimensionRequest::set_has_version() {
  _impl_._oneof_case_[1] = kVersion;
}
inline void EditDimensionRequest::clear_version() {
  if (optional_version_case() == kVersion) {
    _impl_.optional_version_.version_.Destroy();
    clear_has_optional_version();
  }
}
inline const std::string& EditDimensionRequest::version() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditDimensionRequest.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditDimensionRequest::set_version(Arg_&& arg,
                                                     Args_... args) {
  if (optional_version_case() != kVersion) {
    clear_optional_version();

    set_has_version();
    _impl_.optional_version_.version_.InitDefault();
  }
  _impl_.optional_version_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditDimensionRequest.version)
}
inline std::string* EditDimensionRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.EditDimensionRequest.version)
  return _s;
}
inline const std::string& EditDimensionRequest::_internal_version() const {
  if (optional_version_case() != kVersion) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_version_.version_.Get();
}
inline void EditDimensionRequest::_internal_set_version(const std::string& value) {
  if (optional_version_case() != kVersion) {
    clear_optional_version();

    set_has_version();
    _impl_.optional_version_.version_.InitDefault();
  }


  _impl_.optional_version_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::_internal_mutable_version() {
  if (optional_version_case() != kVersion) {
    clear_optional_version();

    set_has_version();
    _impl_.optional_version_.version_.InitDefault();
  }
  return _impl_.optional_version_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::release_version() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.EditDimensionRequest.version)
  if (optional_version_case() != kVersion) {
    return nullptr;
  }
  clear_has_optional_version();
  return _impl_.optional_version_.version_.Release();
}
inline void EditDimensionRequest::set_allocated_version(std::string* value) {
  if (has_optional_version()) {
    clear_optional_version();
  }
  if (value != nullptr) {
    set_has_version();
    _impl_.optional_version_.version_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.EditDimensionRequest.version)
}

// bool edit_maps = 4;
inline void EditDimensionRequest::clear_edit_maps() {
  _impl_.edit_maps_ = false;
}
inline bool EditDimensionRequest::edit_maps() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditDimensionRequest.edit_maps)
  return _internal_edit_maps();
}
inline void EditDimensionRequest::set_edit_maps(bool value) {
  _internal_set_edit_maps(value);
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditDimensionRequest.edit_maps)
}
inline bool EditDimensionRequest::_internal_edit_maps() const {
  return _impl_.edit_maps_;
}
inline void EditDimensionRequest::_internal_set_edit_maps(bool value) {
  ;
  _impl_.edit_maps_ = value;
}

// repeated string map_ids = 5;
inline int EditDimensionRequest::_internal_map_ids_size() const {
  return _impl_.map_ids_.size();
}
inline int EditDimensionRequest::map_ids_size() const {
  return _internal_map_ids_size();
}
inline void EditDimensionRequest::clear_map_ids() {
  _internal_mutable_map_ids()->Clear();
}
inline std::string* EditDimensionRequest::add_map_ids() {
  std::string* _s = _internal_add_map_ids();
  // @@protoc_insertion_point(field_add_mutable:sro.gamebackend.EditDimensionRequest.map_ids)
  return _s;
}
inline const std::string& EditDimensionRequest::map_ids(int index) const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditDimensionRequest.map_ids)
  return _internal_map_ids(index);
}
inline std::string* EditDimensionRequest::mutable_map_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.EditDimensionRequest.map_ids)
  return _internal_mutable_map_ids()->Mutable(index);
}
inline void EditDimensionRequest::set_map_ids(int index, const std::string& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::set_map_ids(int index, std::string&& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::set_map_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::set_map_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_map_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::set_map_ids(int index, absl::string_view value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(const std::string& value) {
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(std::string&& value) {
  _internal_mutable_map_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(const char* value, std::size_t size) {
  _internal_mutable_map_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(absl::string_view value) {
  _internal_mutable_map_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sro.gamebackend.EditDimensionRequest.map_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EditDimensionRequest::map_ids() const {
  // @@protoc_insertion_point(field_list:sro.gamebackend.EditDimensionRequest.map_ids)
  return _internal_map_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* EditDimensionRequest::mutable_map_ids() {
  // @@protoc_insertion_point(field_mutable_list:sro.gamebackend.EditDimensionRequest.map_ids)
  return _internal_mutable_map_ids();
}
inline const std::string& EditDimensionRequest::_internal_map_ids(int index) const {
  return _internal_map_ids().Get(index);
}
inline std::string* EditDimensionRequest::_internal_add_map_ids() {
  return _internal_mutable_map_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EditDimensionRequest::_internal_map_ids() const {
  return _impl_.map_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EditDimensionRequest::_internal_mutable_map_ids() {
  return &_impl_.map_ids_;
}

// string location = 8;
inline bool EditDimensionRequest::has_location() const {
  return optional_location_case() == kLocation;
}
inline void EditDimensionRequest::set_has_location() {
  _impl_._oneof_case_[2] = kLocation;
}
inline void EditDimensionRequest::clear_location() {
  if (optional_location_case() == kLocation) {
    _impl_.optional_location_.location_.Destroy();
    clear_has_optional_location();
  }
}
inline const std::string& EditDimensionRequest::location() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditDimensionRequest.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditDimensionRequest::set_location(Arg_&& arg,
                                                     Args_... args) {
  if (optional_location_case() != kLocation) {
    clear_optional_location();

    set_has_location();
    _impl_.optional_location_.location_.InitDefault();
  }
  _impl_.optional_location_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditDimensionRequest.location)
}
inline std::string* EditDimensionRequest::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.EditDimensionRequest.location)
  return _s;
}
inline const std::string& EditDimensionRequest::_internal_location() const {
  if (optional_location_case() != kLocation) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_location_.location_.Get();
}
inline void EditDimensionRequest::_internal_set_location(const std::string& value) {
  if (optional_location_case() != kLocation) {
    clear_optional_location();

    set_has_location();
    _impl_.optional_location_.location_.InitDefault();
  }


  _impl_.optional_location_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::_internal_mutable_location() {
  if (optional_location_case() != kLocation) {
    clear_optional_location();

    set_has_location();
    _impl_.optional_location_.location_.InitDefault();
  }
  return _impl_.optional_location_.location_.Mutable( GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::release_location() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.EditDimensionRequest.location)
  if (optional_location_case() != kLocation) {
    return nullptr;
  }
  clear_has_optional_location();
  return _impl_.optional_location_.location_.Release();
}
inline void EditDimensionRequest::set_allocated_location(std::string* value) {
  if (has_optional_location()) {
    clear_optional_location();
  }
  if (value != nullptr) {
    set_has_location();
    _impl_.optional_location_.location_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.EditDimensionRequest.location)
}

inline bool EditDimensionRequest::has_optional_name() const {
  return optional_name_case() != OPTIONAL_NAME_NOT_SET;
}
inline void EditDimensionRequest::clear_has_optional_name() {
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}
inline bool EditDimensionRequest::has_optional_version() const {
  return optional_version_case() != OPTIONAL_VERSION_NOT_SET;
}
inline void EditDimensionRequest::clear_has_optional_version() {
  _impl_._oneof_case_[1] = OPTIONAL_VERSION_NOT_SET;
}
inline bool EditDimensionRequest::has_optional_location() const {
  return optional_location_case() != OPTIONAL_LOCATION_NOT_SET;
}
inline void EditDimensionRequest::clear_has_optional_location() {
  _impl_._oneof_case_[2] = OPTIONAL_LOCATION_NOT_SET;
}
inline EditDimensionRequest::OptionalNameCase EditDimensionRequest::optional_name_case() const {
  return EditDimensionRequest::OptionalNameCase(_impl_._oneof_case_[0]);
}
inline EditDimensionRequest::OptionalVersionCase EditDimensionRequest::optional_version_case() const {
  return EditDimensionRequest::OptionalVersionCase(_impl_._oneof_case_[1]);
}
inline EditDimensionRequest::OptionalLocationCase EditDimensionRequest::optional_location_case() const {
  return EditDimensionRequest::OptionalLocationCase(_impl_._oneof_case_[2]);
}
// -------------------------------------------------------------------

// Dimension

// string id = 1;
inline void Dimension::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Dimension::id() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Dimension.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.Dimension.id)
}
inline std::string* Dimension::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Dimension.id)
  return _s;
}
inline const std::string& Dimension::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Dimension::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Dimension::release_id() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.Dimension.id)
  return _impl_.id_.Release();
}
inline void Dimension::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.Dimension.id)
}

// string name = 2;
inline void Dimension::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Dimension::name() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Dimension.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.Dimension.name)
}
inline std::string* Dimension::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Dimension.name)
  return _s;
}
inline const std::string& Dimension::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Dimension::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Dimension::release_name() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.Dimension.name)
  return _impl_.name_.Release();
}
inline void Dimension::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.Dimension.name)
}

// string version = 3;
inline void Dimension::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Dimension::version() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Dimension.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.Dimension.version)
}
inline std::string* Dimension::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Dimension.version)
  return _s;
}
inline const std::string& Dimension::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Dimension::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* Dimension::release_version() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.Dimension.version)
  return _impl_.version_.Release();
}
inline void Dimension::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.Dimension.version)
}

// repeated .sro.gamebackend.Map maps = 4;
inline int Dimension::_internal_maps_size() const {
  return _impl_.maps_.size();
}
inline int Dimension::maps_size() const {
  return _internal_maps_size();
}
inline void Dimension::clear_maps() {
  _internal_mutable_maps()->Clear();
}
inline ::sro::gamebackend::Map* Dimension::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Dimension.maps)
  return _internal_mutable_maps()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map >*
Dimension::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:sro.gamebackend.Dimension.maps)
  return _internal_mutable_maps();
}
inline const ::sro::gamebackend::Map& Dimension::_internal_maps(int index) const {
  return _internal_maps().Get(index);
}
inline const ::sro::gamebackend::Map& Dimension::maps(int index) const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Dimension.maps)
  return _internal_maps(index);
}
inline ::sro::gamebackend::Map* Dimension::_internal_add_maps() {
  return _internal_mutable_maps()->Add();
}
inline ::sro::gamebackend::Map* Dimension::add_maps() {
  ::sro::gamebackend::Map* _add = _internal_add_maps();
  // @@protoc_insertion_point(field_add:sro.gamebackend.Dimension.maps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map >&
Dimension::maps() const {
  // @@protoc_insertion_point(field_list:sro.gamebackend.Dimension.maps)
  return _internal_maps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Map>&
Dimension::_internal_maps() const {
  return _impl_.maps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Map>*
Dimension::_internal_mutable_maps() {
  return &_impl_.maps_;
}

// string location = 6;
inline void Dimension::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& Dimension::location() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Dimension.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_location(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.Dimension.location)
}
inline std::string* Dimension::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Dimension.location)
  return _s;
}
inline const std::string& Dimension::_internal_location() const {
  return _impl_.location_.Get();
}
inline void Dimension::_internal_set_location(const std::string& value) {
  ;


  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_location() {
  ;
  return _impl_.location_.Mutable( GetArenaForAllocation());
}
inline std::string* Dimension::release_location() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.Dimension.location)
  return _impl_.location_.Release();
}
inline void Dimension::set_allocated_location(std::string* value) {
  _impl_.location_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.location_.IsDefault()) {
          _impl_.location_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.Dimension.location)
}

// -------------------------------------------------------------------

// Dimensions

// repeated .sro.gamebackend.Dimension dimensions = 1;
inline int Dimensions::_internal_dimensions_size() const {
  return _impl_.dimensions_.size();
}
inline int Dimensions::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void Dimensions::clear_dimensions() {
  _internal_mutable_dimensions()->Clear();
}
inline ::sro::gamebackend::Dimension* Dimensions::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Dimensions.dimensions)
  return _internal_mutable_dimensions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Dimension >*
Dimensions::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:sro.gamebackend.Dimensions.dimensions)
  return _internal_mutable_dimensions();
}
inline const ::sro::gamebackend::Dimension& Dimensions::_internal_dimensions(int index) const {
  return _internal_dimensions().Get(index);
}
inline const ::sro::gamebackend::Dimension& Dimensions::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Dimensions.dimensions)
  return _internal_dimensions(index);
}
inline ::sro::gamebackend::Dimension* Dimensions::_internal_add_dimensions() {
  return _internal_mutable_dimensions()->Add();
}
inline ::sro::gamebackend::Dimension* Dimensions::add_dimensions() {
  ::sro::gamebackend::Dimension* _add = _internal_add_dimensions();
  // @@protoc_insertion_point(field_add:sro.gamebackend.Dimensions.dimensions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Dimension >&
Dimensions::dimensions() const {
  // @@protoc_insertion_point(field_list:sro.gamebackend.Dimensions.dimensions)
  return _internal_dimensions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Dimension>&
Dimensions::_internal_dimensions() const {
  return _impl_.dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Dimension>*
Dimensions::_internal_mutable_dimensions() {
  return &_impl_.dimensions_;
}

// -------------------------------------------------------------------

// CreateMapRequest

// string name = 1;
inline void CreateMapRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateMapRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.CreateMapRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateMapRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.CreateMapRequest.name)
}
inline std::string* CreateMapRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.CreateMapRequest.name)
  return _s;
}
inline const std::string& CreateMapRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateMapRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMapRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateMapRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.CreateMapRequest.name)
  return _impl_.name_.Release();
}
inline void CreateMapRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.CreateMapRequest.name)
}

// string path = 2;
inline void CreateMapRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& CreateMapRequest::path() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.CreateMapRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateMapRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.CreateMapRequest.path)
}
inline std::string* CreateMapRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.CreateMapRequest.path)
  return _s;
}
inline const std::string& CreateMapRequest::_internal_path() const {
  return _impl_.path_.Get();
}
inline void CreateMapRequest::_internal_set_path(const std::string& value) {
  ;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMapRequest::_internal_mutable_path() {
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateMapRequest::release_path() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.CreateMapRequest.path)
  return _impl_.path_.Release();
}
inline void CreateMapRequest::set_allocated_path(std::string* value) {
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.CreateMapRequest.path)
}

// uint64 max_players = 3;
inline void CreateMapRequest::clear_max_players() {
  _impl_.max_players_ = ::uint64_t{0u};
}
inline ::uint64_t CreateMapRequest::max_players() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.CreateMapRequest.max_players)
  return _internal_max_players();
}
inline void CreateMapRequest::set_max_players(::uint64_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:sro.gamebackend.CreateMapRequest.max_players)
}
inline ::uint64_t CreateMapRequest::_internal_max_players() const {
  return _impl_.max_players_;
}
inline void CreateMapRequest::_internal_set_max_players(::uint64_t value) {
  ;
  _impl_.max_players_ = value;
}

// bool instanced = 4;
inline void CreateMapRequest::clear_instanced() {
  _impl_.instanced_ = false;
}
inline bool CreateMapRequest::instanced() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.CreateMapRequest.instanced)
  return _internal_instanced();
}
inline void CreateMapRequest::set_instanced(bool value) {
  _internal_set_instanced(value);
  // @@protoc_insertion_point(field_set:sro.gamebackend.CreateMapRequest.instanced)
}
inline bool CreateMapRequest::_internal_instanced() const {
  return _impl_.instanced_;
}
inline void CreateMapRequest::_internal_set_instanced(bool value) {
  ;
  _impl_.instanced_ = value;
}

// -------------------------------------------------------------------

// Map

// string id = 1;
inline void Map::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Map::id() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Map.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Map::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.Map.id)
}
inline std::string* Map::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Map.id)
  return _s;
}
inline const std::string& Map::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Map::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Map::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Map::release_id() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.Map.id)
  return _impl_.id_.Release();
}
inline void Map::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.Map.id)
}

// string name = 2;
inline void Map::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Map::name() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Map.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Map::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.Map.name)
}
inline std::string* Map::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Map.name)
  return _s;
}
inline const std::string& Map::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Map::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Map::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Map::release_name() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.Map.name)
  return _impl_.name_.Release();
}
inline void Map::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.Map.name)
}

// string path = 3;
inline void Map::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Map::path() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Map.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Map::set_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.Map.path)
}
inline std::string* Map::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Map.path)
  return _s;
}
inline const std::string& Map::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Map::_internal_set_path(const std::string& value) {
  ;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Map::_internal_mutable_path() {
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* Map::release_path() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.Map.path)
  return _impl_.path_.Release();
}
inline void Map::set_allocated_path(std::string* value) {
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.Map.path)
}

// uint64 max_players = 4;
inline void Map::clear_max_players() {
  _impl_.max_players_ = ::uint64_t{0u};
}
inline ::uint64_t Map::max_players() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Map.max_players)
  return _internal_max_players();
}
inline void Map::set_max_players(::uint64_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:sro.gamebackend.Map.max_players)
}
inline ::uint64_t Map::_internal_max_players() const {
  return _impl_.max_players_;
}
inline void Map::_internal_set_max_players(::uint64_t value) {
  ;
  _impl_.max_players_ = value;
}

// bool instanced = 5;
inline void Map::clear_instanced() {
  _impl_.instanced_ = false;
}
inline bool Map::instanced() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Map.instanced)
  return _internal_instanced();
}
inline void Map::set_instanced(bool value) {
  _internal_set_instanced(value);
  // @@protoc_insertion_point(field_set:sro.gamebackend.Map.instanced)
}
inline bool Map::_internal_instanced() const {
  return _impl_.instanced_;
}
inline void Map::_internal_set_instanced(bool value) {
  ;
  _impl_.instanced_ = value;
}

// -------------------------------------------------------------------

// EditMapRequest

// .sro.gamebackend.MapTarget target = 1;
inline bool EditMapRequest::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void EditMapRequest::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sro::gamebackend::MapTarget& EditMapRequest::_internal_target() const {
  const ::sro::gamebackend::MapTarget* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::gamebackend::MapTarget&>(
      ::sro::gamebackend::_MapTarget_default_instance_);
}
inline const ::sro::gamebackend::MapTarget& EditMapRequest::target() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditMapRequest.target)
  return _internal_target();
}
inline void EditMapRequest::unsafe_arena_set_allocated_target(
    ::sro::gamebackend::MapTarget* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.gamebackend.EditMapRequest.target)
}
inline ::sro::gamebackend::MapTarget* EditMapRequest::release_target() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::gamebackend::MapTarget* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::gamebackend::MapTarget* EditMapRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.EditMapRequest.target)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::gamebackend::MapTarget* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::sro::gamebackend::MapTarget* EditMapRequest::_internal_mutable_target() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::gamebackend::MapTarget>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::sro::gamebackend::MapTarget* EditMapRequest::mutable_target() {
  ::sro::gamebackend::MapTarget* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.EditMapRequest.target)
  return _msg;
}
inline void EditMapRequest::set_allocated_target(::sro::gamebackend::MapTarget* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.EditMapRequest.target)
}

// string name = 2;
inline bool EditMapRequest::has_name() const {
  return optional_name_case() == kName;
}
inline void EditMapRequest::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void EditMapRequest::clear_name() {
  if (optional_name_case() == kName) {
    _impl_.optional_name_.name_.Destroy();
    clear_has_optional_name();
  }
}
inline const std::string& EditMapRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditMapRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMapRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }
  _impl_.optional_name_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditMapRequest.name)
}
inline std::string* EditMapRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.EditMapRequest.name)
  return _s;
}
inline const std::string& EditMapRequest::_internal_name() const {
  if (optional_name_case() != kName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_name_.name_.Get();
}
inline void EditMapRequest::_internal_set_name(const std::string& value) {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }


  _impl_.optional_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EditMapRequest::_internal_mutable_name() {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }
  return _impl_.optional_name_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* EditMapRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.EditMapRequest.name)
  if (optional_name_case() != kName) {
    return nullptr;
  }
  clear_has_optional_name();
  return _impl_.optional_name_.name_.Release();
}
inline void EditMapRequest::set_allocated_name(std::string* value) {
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (value != nullptr) {
    set_has_name();
    _impl_.optional_name_.name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.EditMapRequest.name)
}

// string path = 3;
inline bool EditMapRequest::has_path() const {
  return optional_path_case() == kPath;
}
inline void EditMapRequest::set_has_path() {
  _impl_._oneof_case_[1] = kPath;
}
inline void EditMapRequest::clear_path() {
  if (optional_path_case() == kPath) {
    _impl_.optional_path_.path_.Destroy();
    clear_has_optional_path();
  }
}
inline const std::string& EditMapRequest::path() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditMapRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMapRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  if (optional_path_case() != kPath) {
    clear_optional_path();

    set_has_path();
    _impl_.optional_path_.path_.InitDefault();
  }
  _impl_.optional_path_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditMapRequest.path)
}
inline std::string* EditMapRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.EditMapRequest.path)
  return _s;
}
inline const std::string& EditMapRequest::_internal_path() const {
  if (optional_path_case() != kPath) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_path_.path_.Get();
}
inline void EditMapRequest::_internal_set_path(const std::string& value) {
  if (optional_path_case() != kPath) {
    clear_optional_path();

    set_has_path();
    _impl_.optional_path_.path_.InitDefault();
  }


  _impl_.optional_path_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* EditMapRequest::_internal_mutable_path() {
  if (optional_path_case() != kPath) {
    clear_optional_path();

    set_has_path();
    _impl_.optional_path_.path_.InitDefault();
  }
  return _impl_.optional_path_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* EditMapRequest::release_path() {
  // @@protoc_insertion_point(field_release:sro.gamebackend.EditMapRequest.path)
  if (optional_path_case() != kPath) {
    return nullptr;
  }
  clear_has_optional_path();
  return _impl_.optional_path_.path_.Release();
}
inline void EditMapRequest::set_allocated_path(std::string* value) {
  if (has_optional_path()) {
    clear_optional_path();
  }
  if (value != nullptr) {
    set_has_path();
    _impl_.optional_path_.path_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gamebackend.EditMapRequest.path)
}

// uint64 max_players = 4;
inline bool EditMapRequest::has_max_players() const {
  return optional_max_players_case() == kMaxPlayers;
}
inline void EditMapRequest::set_has_max_players() {
  _impl_._oneof_case_[2] = kMaxPlayers;
}
inline void EditMapRequest::clear_max_players() {
  if (optional_max_players_case() == kMaxPlayers) {
    _impl_.optional_max_players_.max_players_ = ::uint64_t{0u};
    clear_has_optional_max_players();
  }
}
inline ::uint64_t EditMapRequest::max_players() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditMapRequest.max_players)
  return _internal_max_players();
}
inline void EditMapRequest::set_max_players(::uint64_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditMapRequest.max_players)
}
inline ::uint64_t EditMapRequest::_internal_max_players() const {
  if (optional_max_players_case() == kMaxPlayers) {
    return _impl_.optional_max_players_.max_players_;
  }
  return ::uint64_t{0u};
}
inline void EditMapRequest::_internal_set_max_players(::uint64_t value) {
  if (optional_max_players_case() != kMaxPlayers) {
    clear_optional_max_players();
    set_has_max_players();
  }
  _impl_.optional_max_players_.max_players_ = value;
}

// bool instanced = 5;
inline bool EditMapRequest::has_instanced() const {
  return optional_instanced_case() == kInstanced;
}
inline void EditMapRequest::set_has_instanced() {
  _impl_._oneof_case_[3] = kInstanced;
}
inline void EditMapRequest::clear_instanced() {
  if (optional_instanced_case() == kInstanced) {
    _impl_.optional_instanced_.instanced_ = false;
    clear_has_optional_instanced();
  }
}
inline bool EditMapRequest::instanced() const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.EditMapRequest.instanced)
  return _internal_instanced();
}
inline void EditMapRequest::set_instanced(bool value) {
  _internal_set_instanced(value);
  // @@protoc_insertion_point(field_set:sro.gamebackend.EditMapRequest.instanced)
}
inline bool EditMapRequest::_internal_instanced() const {
  if (optional_instanced_case() == kInstanced) {
    return _impl_.optional_instanced_.instanced_;
  }
  return false;
}
inline void EditMapRequest::_internal_set_instanced(bool value) {
  if (optional_instanced_case() != kInstanced) {
    clear_optional_instanced();
    set_has_instanced();
  }
  _impl_.optional_instanced_.instanced_ = value;
}

inline bool EditMapRequest::has_optional_name() const {
  return optional_name_case() != OPTIONAL_NAME_NOT_SET;
}
inline void EditMapRequest::clear_has_optional_name() {
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}
inline bool EditMapRequest::has_optional_path() const {
  return optional_path_case() != OPTIONAL_PATH_NOT_SET;
}
inline void EditMapRequest::clear_has_optional_path() {
  _impl_._oneof_case_[1] = OPTIONAL_PATH_NOT_SET;
}
inline bool EditMapRequest::has_optional_max_players() const {
  return optional_max_players_case() != OPTIONAL_MAX_PLAYERS_NOT_SET;
}
inline void EditMapRequest::clear_has_optional_max_players() {
  _impl_._oneof_case_[2] = OPTIONAL_MAX_PLAYERS_NOT_SET;
}
inline bool EditMapRequest::has_optional_instanced() const {
  return optional_instanced_case() != OPTIONAL_INSTANCED_NOT_SET;
}
inline void EditMapRequest::clear_has_optional_instanced() {
  _impl_._oneof_case_[3] = OPTIONAL_INSTANCED_NOT_SET;
}
inline EditMapRequest::OptionalNameCase EditMapRequest::optional_name_case() const {
  return EditMapRequest::OptionalNameCase(_impl_._oneof_case_[0]);
}
inline EditMapRequest::OptionalPathCase EditMapRequest::optional_path_case() const {
  return EditMapRequest::OptionalPathCase(_impl_._oneof_case_[1]);
}
inline EditMapRequest::OptionalMaxPlayersCase EditMapRequest::optional_max_players_case() const {
  return EditMapRequest::OptionalMaxPlayersCase(_impl_._oneof_case_[2]);
}
inline EditMapRequest::OptionalInstancedCase EditMapRequest::optional_instanced_case() const {
  return EditMapRequest::OptionalInstancedCase(_impl_._oneof_case_[3]);
}
// -------------------------------------------------------------------

// Maps

// repeated .sro.gamebackend.Map maps = 1;
inline int Maps::_internal_maps_size() const {
  return _impl_.maps_.size();
}
inline int Maps::maps_size() const {
  return _internal_maps_size();
}
inline void Maps::clear_maps() {
  _internal_mutable_maps()->Clear();
}
inline ::sro::gamebackend::Map* Maps::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gamebackend.Maps.maps)
  return _internal_mutable_maps()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map >*
Maps::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:sro.gamebackend.Maps.maps)
  return _internal_mutable_maps();
}
inline const ::sro::gamebackend::Map& Maps::_internal_maps(int index) const {
  return _internal_maps().Get(index);
}
inline const ::sro::gamebackend::Map& Maps::maps(int index) const {
  // @@protoc_insertion_point(field_get:sro.gamebackend.Maps.maps)
  return _internal_maps(index);
}
inline ::sro::gamebackend::Map* Maps::_internal_add_maps() {
  return _internal_mutable_maps()->Add();
}
inline ::sro::gamebackend::Map* Maps::add_maps() {
  ::sro::gamebackend::Map* _add = _internal_add_maps();
  // @@protoc_insertion_point(field_add:sro.gamebackend.Maps.maps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gamebackend::Map >&
Maps::maps() const {
  // @@protoc_insertion_point(field_list:sro.gamebackend.Maps.maps)
  return _internal_maps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Map>&
Maps::_internal_maps() const {
  return _impl_.maps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gamebackend::Map>*
Maps::_internal_mutable_maps() {
  return &_impl_.maps_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace gamebackend
}  // namespace sro


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sro_2fgamebackend_2fservermanager_2eproto_2epb_2eh
