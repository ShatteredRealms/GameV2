#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/gamebackend/servermanager.proto

#include "sro/gamebackend/servermanager.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sro {
namespace gamebackend {
template <typename>
PROTOBUF_CONSTEXPR DimensionTarget::DimensionTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.FindBy_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DimensionTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DimensionTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DimensionTargetDefaultTypeInternal() {}
  union {
    DimensionTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DimensionTargetDefaultTypeInternal _DimensionTarget_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MapTarget::MapTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.FindBy_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MapTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapTargetDefaultTypeInternal() {}
  union {
    MapTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapTargetDefaultTypeInternal _MapTarget_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateDimensionRequest::CreateDimensionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_ids_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateDimensionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateDimensionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateDimensionRequestDefaultTypeInternal() {}
  union {
    CreateDimensionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateDimensionRequestDefaultTypeInternal _CreateDimensionRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DuplicateDimensionRequest::DuplicateDimensionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.target_)*/nullptr} {}
struct DuplicateDimensionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DuplicateDimensionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DuplicateDimensionRequestDefaultTypeInternal() {}
  union {
    DuplicateDimensionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DuplicateDimensionRequestDefaultTypeInternal _DuplicateDimensionRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EditDimensionRequest::EditDimensionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_ids_)*/{}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.edit_maps_)*/ false

  , /*decltype(_impl_.optional_name_)*/{}
  , /*decltype(_impl_.optional_version_)*/{}
  , /*decltype(_impl_.optional_location_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EditDimensionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditDimensionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditDimensionRequestDefaultTypeInternal() {}
  union {
    EditDimensionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditDimensionRequestDefaultTypeInternal _EditDimensionRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Dimension::Dimension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maps_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DimensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DimensionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DimensionDefaultTypeInternal() {}
  union {
    Dimension _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DimensionDefaultTypeInternal _Dimension_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Dimensions::Dimensions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DimensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DimensionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DimensionsDefaultTypeInternal() {}
  union {
    Dimensions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DimensionsDefaultTypeInternal _Dimensions_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateMapRequest::CreateMapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.max_players_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.instanced_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateMapRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateMapRequestDefaultTypeInternal() {}
  union {
    CreateMapRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateMapRequestDefaultTypeInternal _CreateMapRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Map::Map(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.max_players_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.instanced_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDefaultTypeInternal() {}
  union {
    Map _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDefaultTypeInternal _Map_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EditMapRequest::EditMapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.optional_name_)*/{}
  , /*decltype(_impl_.optional_path_)*/{}
  , /*decltype(_impl_.optional_max_players_)*/{}
  , /*decltype(_impl_.optional_instanced_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EditMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditMapRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditMapRequestDefaultTypeInternal() {}
  union {
    EditMapRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditMapRequestDefaultTypeInternal _EditMapRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Maps::Maps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maps_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapsDefaultTypeInternal() {}
  union {
    Maps _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapsDefaultTypeInternal _Maps_default_instance_;
}  // namespace gamebackend
}  // namespace sro
static ::_pb::Metadata file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[11];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sro_2fgamebackend_2fservermanager_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sro_2fgamebackend_2fservermanager_2eproto = nullptr;
const ::uint32_t TableStruct_sro_2fgamebackend_2fservermanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::DimensionTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::DimensionTarget, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::DimensionTarget, _impl_.FindBy_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::MapTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::MapTarget, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::MapTarget, _impl_.FindBy_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateDimensionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateDimensionRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateDimensionRequest, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateDimensionRequest, _impl_.map_ids_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateDimensionRequest, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::DuplicateDimensionRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::DuplicateDimensionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::DuplicateDimensionRequest, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::DuplicateDimensionRequest, _impl_.name_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _impl_.target_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _impl_.edit_maps_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _impl_.map_ids_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _impl_.optional_name_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _impl_.optional_version_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _impl_.optional_location_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Dimension, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Dimension, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Dimension, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Dimension, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Dimension, _impl_.maps_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Dimension, _impl_.location_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Dimensions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Dimensions, _impl_.dimensions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateMapRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateMapRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateMapRequest, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateMapRequest, _impl_.max_players_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::CreateMapRequest, _impl_.instanced_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Map, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Map, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Map, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Map, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Map, _impl_.max_players_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Map, _impl_.instanced_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditMapRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditMapRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditMapRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditMapRequest, _impl_.target_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditMapRequest, _impl_.optional_name_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditMapRequest, _impl_.optional_path_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditMapRequest, _impl_.optional_max_players_),
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditMapRequest, _impl_.optional_instanced_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Maps, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::Maps, _impl_.maps_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::sro::gamebackend::DimensionTarget)},
        { 11, -1, -1, sizeof(::sro::gamebackend::MapTarget)},
        { 22, -1, -1, sizeof(::sro::gamebackend::CreateDimensionRequest)},
        { 34, 44, -1, sizeof(::sro::gamebackend::DuplicateDimensionRequest)},
        { 46, 63, -1, sizeof(::sro::gamebackend::EditDimensionRequest)},
        { 69, -1, -1, sizeof(::sro::gamebackend::Dimension)},
        { 82, -1, -1, sizeof(::sro::gamebackend::Dimensions)},
        { 91, -1, -1, sizeof(::sro::gamebackend::CreateMapRequest)},
        { 103, -1, -1, sizeof(::sro::gamebackend::Map)},
        { 116, 133, -1, sizeof(::sro::gamebackend::EditMapRequest)},
        { 138, -1, -1, sizeof(::sro::gamebackend::Maps)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sro::gamebackend::_DimensionTarget_default_instance_._instance,
    &::sro::gamebackend::_MapTarget_default_instance_._instance,
    &::sro::gamebackend::_CreateDimensionRequest_default_instance_._instance,
    &::sro::gamebackend::_DuplicateDimensionRequest_default_instance_._instance,
    &::sro::gamebackend::_EditDimensionRequest_default_instance_._instance,
    &::sro::gamebackend::_Dimension_default_instance_._instance,
    &::sro::gamebackend::_Dimensions_default_instance_._instance,
    &::sro::gamebackend::_CreateMapRequest_default_instance_._instance,
    &::sro::gamebackend::_Map_default_instance_._instance,
    &::sro::gamebackend::_EditMapRequest_default_instance_._instance,
    &::sro::gamebackend::_Maps_default_instance_._instance,
};
const char descriptor_table_protodef_sro_2fgamebackend_2fservermanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#sro/gamebackend/servermanager.proto\022\017s"
    "ro.gamebackend\032\034google/api/annotations.p"
    "roto\032\033google/protobuf/empty.proto\"9\n\017Dim"
    "ensionTarget\022\014\n\002id\030\001 \001(\tH\000\022\016\n\004name\030\002 \001(\t"
    "H\000B\010\n\006FindBy\"3\n\tMapTarget\022\014\n\002id\030\001 \001(\tH\000\022"
    "\016\n\004name\030\002 \001(\tH\000B\010\n\006FindBy\"Z\n\026CreateDimen"
    "sionRequest\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001"
    "(\t\022\017\n\007map_ids\030\003 \003(\t\022\020\n\010location\030\004 \001(\t\"[\n"
    "\031DuplicateDimensionRequest\0220\n\006target\030\001 \001"
    "(\0132 .sro.gamebackend.DimensionTarget\022\014\n\004"
    "name\030\002 \001(\t\"\335\001\n\024EditDimensionRequest\0220\n\006t"
    "arget\030\001 \001(\0132 .sro.gamebackend.DimensionT"
    "arget\022\016\n\004name\030\002 \001(\tH\000\022\021\n\007version\030\003 \001(\tH\001"
    "\022\021\n\tedit_maps\030\004 \001(\010\022\017\n\007map_ids\030\005 \003(\t\022\022\n\010"
    "location\030\010 \001(\tH\002B\017\n\roptional_nameB\022\n\020opt"
    "ional_versionB\023\n\021optional_location\"l\n\tDi"
    "mension\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007ver"
    "sion\030\003 \001(\t\022\"\n\004maps\030\004 \003(\0132\024.sro.gamebacke"
    "nd.Map\022\020\n\010location\030\006 \001(\t\"<\n\nDimensions\022."
    "\n\ndimensions\030\001 \003(\0132\032.sro.gamebackend.Dim"
    "ension\"V\n\020CreateMapRequest\022\014\n\004name\030\001 \001(\t"
    "\022\014\n\004path\030\002 \001(\t\022\023\n\013max_players\030\003 \001(\004\022\021\n\ti"
    "nstanced\030\004 \001(\010\"U\n\003Map\022\n\n\002id\030\001 \001(\t\022\014\n\004nam"
    "e\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022\023\n\013max_players\030\004 \001"
    "(\004\022\021\n\tinstanced\030\005 \001(\010\"\330\001\n\016EditMapRequest"
    "\022*\n\006target\030\001 \001(\0132\032.sro.gamebackend.MapTa"
    "rget\022\016\n\004name\030\002 \001(\tH\000\022\016\n\004path\030\003 \001(\tH\001\022\025\n\013"
    "max_players\030\004 \001(\004H\002\022\023\n\tinstanced\030\005 \001(\010H\003"
    "B\017\n\roptional_nameB\017\n\roptional_pathB\026\n\024op"
    "tional_max_playersB\024\n\022optional_instanced"
    "\"*\n\004Maps\022\"\n\004maps\030\001 \003(\0132\024.sro.gamebackend"
    ".Map2\371\n\n\024ServerManagerService\022q\n\017CreateD"
    "imension\022\'.sro.gamebackend.CreateDimensi"
    "onRequest\032\032.sro.gamebackend.Dimension\"\031\202"
    "\323\344\223\002\023\"\016/v1/dimensions:\001*\022\277\001\n\022DuplicateDi"
    "mension\022*.sro.gamebackend.DuplicateDimen"
    "sionRequest\032\032.sro.gamebackend.Dimension\""
    "a\202\323\344\223\002[\"+/v1/dimensions/duplicate/name/{"
    "target.name}:\001*Z)\"\'/v1/dimensions/duplic"
    "ate/id/{target.id}\022\212\001\n\014GetDimension\022 .sr"
    "o.gamebackend.DimensionTarget\032\032.sro.game"
    "backend.Dimension\"<\202\323\344\223\0026\022\032/v1/dimension"
    "s/name/{name}Z\030\022\026/v1/dimensions/id/{id}\022"
    "^\n\017GetAllDimension\022\026.google.protobuf.Emp"
    "ty\032\033.sro.gamebackend.Dimensions\"\026\202\323\344\223\002\020\022"
    "\016/v1/dimensions\022\241\001\n\rEditDimension\022%.sro."
    "gamebackend.EditDimensionRequest\032\032.sro.g"
    "amebackend.Dimension\"M\202\323\344\223\002G\032!/v1/dimens"
    "ions/name/{target.name}:\001*Z\037\032\035/v1/dimens"
    "ions/id/{target.id}\022\211\001\n\017DeleteDimension\022"
    " .sro.gamebackend.DimensionTarget\032\026.goog"
    "le.protobuf.Empty\"<\202\323\344\223\0026*\032/v1/dimension"
    "s/name/{name}Z\030*\026/v1/dimensions/id/{id}\022"
    "Y\n\tCreateMap\022!.sro.gamebackend.CreateMap"
    "Request\032\024.sro.gamebackend.Map\"\023\202\323\344\223\002\r\"\010/"
    "v1/maps:\001*\022l\n\006GetMap\022\032.sro.gamebackend.M"
    "apTarget\032\024.sro.gamebackend.Map\"0\202\323\344\223\002*\022\024"
    "/v1/maps/name/{name}Z\022\022\020/v1/maps/id/{id}"
    "\022M\n\nGetAllMaps\022\026.google.protobuf.Empty\032\025"
    ".sro.gamebackend.Maps\"\020\202\323\344\223\002\n\022\010/v1/maps\022"
    "\203\001\n\007EditMap\022\037.sro.gamebackend.EditMapReq"
    "uest\032\024.sro.gamebackend.Map\"A\202\323\344\223\002;\032\033/v1/"
    "maps/name/{target.name}:\001*Z\031\032\027/v1/maps/i"
    "d/{target.id}\022q\n\tDeleteMap\022\032.sro.gamebac"
    "kend.MapTarget\032\026.google.protobuf.Empty\"0"
    "\202\323\344\223\002**\024/v1/maps/name/{name}Z\022*\020/v1/maps"
    "/id/{id}B\010Z\006pkg/pbb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sro_2fgamebackend_2fservermanager_2eproto = {
    false,
    false,
    2666,
    descriptor_table_protodef_sro_2fgamebackend_2fservermanager_2eproto,
    "sro/gamebackend/servermanager.proto",
    &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
    descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_deps,
    2,
    11,
    schemas,
    file_default_instances,
    TableStruct_sro_2fgamebackend_2fservermanager_2eproto::offsets,
    file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto,
    file_level_enum_descriptors_sro_2fgamebackend_2fservermanager_2eproto,
    file_level_service_descriptors_sro_2fgamebackend_2fservermanager_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter() {
  return &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sro_2fgamebackend_2fservermanager_2eproto(&descriptor_table_sro_2fgamebackend_2fservermanager_2eproto);
namespace sro {
namespace gamebackend {
// ===================================================================

class DimensionTarget::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::DimensionTarget, _impl_._oneof_case_);
};

DimensionTarget::DimensionTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.DimensionTarget)
}
DimensionTarget::DimensionTarget(const DimensionTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DimensionTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.FindBy_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_FindBy();
  switch (from.FindBy_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case FINDBY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.DimensionTarget)
}

inline void DimensionTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.FindBy_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_FindBy();
}

DimensionTarget::~DimensionTarget() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.DimensionTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DimensionTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_FindBy()) {
    clear_FindBy();
  }
}

void DimensionTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DimensionTarget::clear_FindBy() {
// @@protoc_insertion_point(one_of_clear_start:sro.gamebackend.DimensionTarget)
  switch (FindBy_case()) {
    case kId: {
      _impl_.FindBy_.id_.Destroy();
      break;
    }
    case kName: {
      _impl_.FindBy_.name_.Destroy();
      break;
    }
    case FINDBY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FINDBY_NOT_SET;
}


void DimensionTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.DimensionTarget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_FindBy();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DimensionTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.DimensionTarget.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.DimensionTarget.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DimensionTarget::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.DimensionTarget)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (FindBy_case()) {
    case kId: {
      const std::string& _s = this->_internal_id();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.DimensionTarget.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
      break;
    }
    case kName: {
      const std::string& _s = this->_internal_name();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.DimensionTarget.name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.DimensionTarget)
  return target;
}

::size_t DimensionTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.DimensionTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (FindBy_case()) {
    // string id = 1;
    case kId: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
      break;
    }
    // string name = 2;
    case kName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case FINDBY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DimensionTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DimensionTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DimensionTarget::GetClassData() const { return &_class_data_; }


void DimensionTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DimensionTarget*>(&to_msg);
  auto& from = static_cast<const DimensionTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.DimensionTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.FindBy_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case FINDBY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DimensionTarget::CopyFrom(const DimensionTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.DimensionTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionTarget::IsInitialized() const {
  return true;
}

void DimensionTarget::InternalSwap(DimensionTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.FindBy_, other->_impl_.FindBy_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DimensionTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[0]);
}
// ===================================================================

class MapTarget::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::MapTarget, _impl_._oneof_case_);
};

MapTarget::MapTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.MapTarget)
}
MapTarget::MapTarget(const MapTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.FindBy_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_FindBy();
  switch (from.FindBy_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case FINDBY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.MapTarget)
}

inline void MapTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.FindBy_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_FindBy();
}

MapTarget::~MapTarget() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.MapTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_FindBy()) {
    clear_FindBy();
  }
}

void MapTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapTarget::clear_FindBy() {
// @@protoc_insertion_point(one_of_clear_start:sro.gamebackend.MapTarget)
  switch (FindBy_case()) {
    case kId: {
      _impl_.FindBy_.id_.Destroy();
      break;
    }
    case kName: {
      _impl_.FindBy_.name_.Destroy();
      break;
    }
    case FINDBY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FINDBY_NOT_SET;
}


void MapTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.MapTarget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_FindBy();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.MapTarget.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.MapTarget.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MapTarget::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.MapTarget)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (FindBy_case()) {
    case kId: {
      const std::string& _s = this->_internal_id();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.MapTarget.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
      break;
    }
    case kName: {
      const std::string& _s = this->_internal_name();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.MapTarget.name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.MapTarget)
  return target;
}

::size_t MapTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.MapTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (FindBy_case()) {
    // string id = 1;
    case kId: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
      break;
    }
    // string name = 2;
    case kName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case FINDBY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapTarget::GetClassData() const { return &_class_data_; }


void MapTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapTarget*>(&to_msg);
  auto& from = static_cast<const MapTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.MapTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.FindBy_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case FINDBY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapTarget::CopyFrom(const MapTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.MapTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTarget::IsInitialized() const {
  return true;
}

void MapTarget::InternalSwap(MapTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.FindBy_, other->_impl_.FindBy_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[1]);
}
// ===================================================================

class CreateDimensionRequest::_Internal {
 public:
};

CreateDimensionRequest::CreateDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.CreateDimensionRequest)
}
CreateDimensionRequest::CreateDimensionRequest(const CreateDimensionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateDimensionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_){from._impl_.map_ids_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.location_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.CreateDimensionRequest)
}

inline void CreateDimensionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.location_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateDimensionRequest::~CreateDimensionRequest() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.CreateDimensionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateDimensionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_map_ids()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.location_.Destroy();
}

void CreateDimensionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateDimensionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.CreateDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_map_ids()->Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDimensionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.CreateDimensionRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.CreateDimensionRequest.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string map_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_map_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.CreateDimensionRequest.map_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.CreateDimensionRequest.location"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateDimensionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.CreateDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.CreateDimensionRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.CreateDimensionRequest.version");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string map_ids = 3;
  for (int i = 0, n = this->_internal_map_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_map_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.CreateDimensionRequest.map_ids");
    target = stream->WriteString(3, s, target);
  }

  // string location = 4;
  if (!this->_internal_location().empty()) {
    const std::string& _s = this->_internal_location();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.CreateDimensionRequest.location");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.CreateDimensionRequest)
  return target;
}

::size_t CreateDimensionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.CreateDimensionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string map_ids = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_map_ids().size());
  for (int i = 0, n = _internal_map_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_map_ids().Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string location = 4;
  if (!this->_internal_location().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDimensionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateDimensionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDimensionRequest::GetClassData() const { return &_class_data_; }


void CreateDimensionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateDimensionRequest*>(&to_msg);
  auto& from = static_cast<const CreateDimensionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.CreateDimensionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_map_ids()->MergeFrom(from._internal_map_ids());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDimensionRequest::CopyFrom(const CreateDimensionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.CreateDimensionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDimensionRequest::IsInitialized() const {
  return true;
}

void CreateDimensionRequest::InternalSwap(CreateDimensionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_map_ids()->InternalSwap(
      other->_internal_mutable_map_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, lhs_arena,
                                       &other->_impl_.location_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDimensionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[2]);
}
// ===================================================================

class DuplicateDimensionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DuplicateDimensionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DuplicateDimensionRequest, _impl_._has_bits_);
  static const ::sro::gamebackend::DimensionTarget& target(const DuplicateDimensionRequest* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::gamebackend::DimensionTarget&
DuplicateDimensionRequest::_Internal::target(const DuplicateDimensionRequest* msg) {
  return *msg->_impl_.target_;
}
DuplicateDimensionRequest::DuplicateDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.DuplicateDimensionRequest)
}
DuplicateDimensionRequest::DuplicateDimensionRequest(const DuplicateDimensionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DuplicateDimensionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.target_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::sro::gamebackend::DimensionTarget(*from._impl_.target_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.DuplicateDimensionRequest)
}

inline void DuplicateDimensionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.target_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DuplicateDimensionRequest::~DuplicateDimensionRequest() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.DuplicateDimensionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DuplicateDimensionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.target_;
}

void DuplicateDimensionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DuplicateDimensionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.DuplicateDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_ != nullptr);
    _impl_.target_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DuplicateDimensionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sro.gamebackend.DimensionTarget target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.DuplicateDimensionRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DuplicateDimensionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.DuplicateDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.gamebackend.DimensionTarget target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.DuplicateDimensionRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.DuplicateDimensionRequest)
  return target;
}

::size_t DuplicateDimensionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.DuplicateDimensionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .sro.gamebackend.DimensionTarget target = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DuplicateDimensionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DuplicateDimensionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DuplicateDimensionRequest::GetClassData() const { return &_class_data_; }


void DuplicateDimensionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DuplicateDimensionRequest*>(&to_msg);
  auto& from = static_cast<const DuplicateDimensionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.DuplicateDimensionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_target()->::sro::gamebackend::DimensionTarget::MergeFrom(
        from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DuplicateDimensionRequest::CopyFrom(const DuplicateDimensionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.DuplicateDimensionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateDimensionRequest::IsInitialized() const {
  return true;
}

void DuplicateDimensionRequest::InternalSwap(DuplicateDimensionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.target_, other->_impl_.target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DuplicateDimensionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[3]);
}
// ===================================================================

class EditDimensionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EditDimensionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EditDimensionRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditDimensionRequest, _impl_._oneof_case_);
  static const ::sro::gamebackend::DimensionTarget& target(const EditDimensionRequest* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::gamebackend::DimensionTarget&
EditDimensionRequest::_Internal::target(const EditDimensionRequest* msg) {
  return *msg->_impl_.target_;
}
EditDimensionRequest::EditDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.EditDimensionRequest)
}
EditDimensionRequest::EditDimensionRequest(const EditDimensionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditDimensionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_ids_){from._impl_.map_ids_}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.edit_maps_) {}

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_version_){}
    , decltype(_impl_.optional_location_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::sro::gamebackend::DimensionTarget(*from._impl_.target_);
  }
  _this->_impl_.edit_maps_ = from._impl_.edit_maps_;
  clear_has_optional_name();
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  clear_has_optional_version();
  switch (from.optional_version_case()) {
    case kVersion: {
      _this->_internal_set_version(from._internal_version());
      break;
    }
    case OPTIONAL_VERSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_location();
  switch (from.optional_location_case()) {
    case kLocation: {
      _this->_internal_set_location(from._internal_location());
      break;
    }
    case OPTIONAL_LOCATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.EditDimensionRequest)
}

inline void EditDimensionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_ids_){arena}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.edit_maps_) { false }

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_version_){}
    , decltype(_impl_.optional_location_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_name();
  clear_has_optional_version();
  clear_has_optional_location();
}

EditDimensionRequest::~EditDimensionRequest() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.EditDimensionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditDimensionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_map_ids()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.target_;
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (has_optional_version()) {
    clear_optional_version();
  }
  if (has_optional_location()) {
    clear_optional_location();
  }
}

void EditDimensionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditDimensionRequest::clear_optional_name() {
// @@protoc_insertion_point(one_of_clear_start:sro.gamebackend.EditDimensionRequest)
  switch (optional_name_case()) {
    case kName: {
      _impl_.optional_name_.name_.Destroy();
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}

void EditDimensionRequest::clear_optional_version() {
// @@protoc_insertion_point(one_of_clear_start:sro.gamebackend.EditDimensionRequest)
  switch (optional_version_case()) {
    case kVersion: {
      _impl_.optional_version_.version_.Destroy();
      break;
    }
    case OPTIONAL_VERSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_VERSION_NOT_SET;
}

void EditDimensionRequest::clear_optional_location() {
// @@protoc_insertion_point(one_of_clear_start:sro.gamebackend.EditDimensionRequest)
  switch (optional_location_case()) {
    case kLocation: {
      _impl_.optional_location_.location_.Destroy();
      break;
    }
    case OPTIONAL_LOCATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_LOCATION_NOT_SET;
}


void EditDimensionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.EditDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_map_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_ != nullptr);
    _impl_.target_->Clear();
  }
  _impl_.edit_maps_ = false;
  clear_optional_name();
  clear_optional_version();
  clear_optional_location();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditDimensionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sro.gamebackend.DimensionTarget target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.EditDimensionRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.EditDimensionRequest.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool edit_maps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.edit_maps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string map_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_map_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.EditDimensionRequest.map_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.EditDimensionRequest.location"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EditDimensionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.EditDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.gamebackend.DimensionTarget target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (optional_name_case() == kName) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.EditDimensionRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string version = 3;
  if (optional_version_case() == kVersion) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.EditDimensionRequest.version");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool edit_maps = 4;
  if (this->_internal_edit_maps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_edit_maps(), target);
  }

  // repeated string map_ids = 5;
  for (int i = 0, n = this->_internal_map_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_map_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.EditDimensionRequest.map_ids");
    target = stream->WriteString(5, s, target);
  }

  // string location = 8;
  if (optional_location_case() == kLocation) {
    const std::string& _s = this->_internal_location();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.EditDimensionRequest.location");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.EditDimensionRequest)
  return target;
}

::size_t EditDimensionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.EditDimensionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string map_ids = 5;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_map_ids().size());
  for (int i = 0, n = _internal_map_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_map_ids().Get(i));
  }

  // .sro.gamebackend.DimensionTarget target = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  // bool edit_maps = 4;
  if (this->_internal_edit_maps() != 0) {
    total_size += 2;
  }

  switch (optional_name_case()) {
    // string name = 2;
    case kName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (optional_version_case()) {
    // string version = 3;
    case kVersion: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_version());
      break;
    }
    case OPTIONAL_VERSION_NOT_SET: {
      break;
    }
  }
  switch (optional_location_case()) {
    // string location = 8;
    case kLocation: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_location());
      break;
    }
    case OPTIONAL_LOCATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditDimensionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditDimensionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditDimensionRequest::GetClassData() const { return &_class_data_; }


void EditDimensionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditDimensionRequest*>(&to_msg);
  auto& from = static_cast<const EditDimensionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.EditDimensionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_map_ids()->MergeFrom(from._internal_map_ids());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_target()->::sro::gamebackend::DimensionTarget::MergeFrom(
        from._internal_target());
  }
  if (from._internal_edit_maps() != 0) {
    _this->_internal_set_edit_maps(from._internal_edit_maps());
  }
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.optional_version_case()) {
    case kVersion: {
      _this->_internal_set_version(from._internal_version());
      break;
    }
    case OPTIONAL_VERSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_location_case()) {
    case kLocation: {
      _this->_internal_set_location(from._internal_location());
      break;
    }
    case OPTIONAL_LOCATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditDimensionRequest::CopyFrom(const EditDimensionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.EditDimensionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditDimensionRequest::IsInitialized() const {
  return true;
}

void EditDimensionRequest::InternalSwap(EditDimensionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_map_ids()->InternalSwap(
      other->_internal_mutable_map_ids());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EditDimensionRequest, _impl_.edit_maps_)
      + sizeof(EditDimensionRequest::_impl_.edit_maps_)
      - PROTOBUF_FIELD_OFFSET(EditDimensionRequest, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
  swap(_impl_.optional_name_, other->_impl_.optional_name_);
  swap(_impl_.optional_version_, other->_impl_.optional_version_);
  swap(_impl_.optional_location_, other->_impl_.optional_location_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditDimensionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[4]);
}
// ===================================================================

class Dimension::_Internal {
 public:
};

Dimension::Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.Dimension)
}
Dimension::Dimension(const Dimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dimension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){from._impl_.maps_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.location_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.Dimension)
}

inline void Dimension::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.location_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dimension::~Dimension() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.Dimension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dimension::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_maps()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.location_.Destroy();
}

void Dimension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.Dimension)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_maps()->Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dimension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.Dimension.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.Dimension.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.Dimension.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .sro.gamebackend.Map maps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.Dimension.location"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Dimension::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.Dimension)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.Dimension.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.Dimension.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.Dimension.version");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .sro.gamebackend.Map maps = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_maps_size()); i < n; i++) {
    const auto& repfield = this->_internal_maps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string location = 6;
  if (!this->_internal_location().empty()) {
    const std::string& _s = this->_internal_location();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.Dimension.location");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.Dimension)
  return target;
}

::size_t Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.Dimension)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.gamebackend.Map maps = 4;
  total_size += 1UL * this->_internal_maps_size();
  for (const auto& msg : this->_internal_maps()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string location = 6;
  if (!this->_internal_location().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dimension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dimension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dimension::GetClassData() const { return &_class_data_; }


void Dimension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dimension*>(&to_msg);
  auto& from = static_cast<const Dimension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.Dimension)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_maps()->MergeFrom(from._internal_maps());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dimension::CopyFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension::IsInitialized() const {
  return true;
}

void Dimension::InternalSwap(Dimension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_maps()->InternalSwap(other->_internal_mutable_maps());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, lhs_arena,
                                       &other->_impl_.location_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dimension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[5]);
}
// ===================================================================

class Dimensions::_Internal {
 public:
};

Dimensions::Dimensions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.Dimensions)
}
Dimensions::Dimensions(const Dimensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dimensions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.Dimensions)
}

inline void Dimensions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Dimensions::~Dimensions() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.Dimensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dimensions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_dimensions()->~RepeatedPtrField();
}

void Dimensions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dimensions::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.Dimensions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_dimensions()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dimensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.gamebackend.Dimension dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Dimensions::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.Dimensions)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.gamebackend.Dimension dimensions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dimensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dimensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.Dimensions)
  return target;
}

::size_t Dimensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.Dimensions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.gamebackend.Dimension dimensions = 1;
  total_size += 1UL * this->_internal_dimensions_size();
  for (const auto& msg : this->_internal_dimensions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dimensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dimensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dimensions::GetClassData() const { return &_class_data_; }


void Dimensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dimensions*>(&to_msg);
  auto& from = static_cast<const Dimensions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.Dimensions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dimensions()->MergeFrom(from._internal_dimensions());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dimensions::CopyFrom(const Dimensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.Dimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimensions::IsInitialized() const {
  return true;
}

void Dimensions::InternalSwap(Dimensions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_dimensions()->InternalSwap(other->_internal_mutable_dimensions());
}

::PROTOBUF_NAMESPACE_ID::Metadata Dimensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[6]);
}
// ===================================================================

class CreateMapRequest::_Internal {
 public:
};

CreateMapRequest::CreateMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.CreateMapRequest)
}
CreateMapRequest::CreateMapRequest(const CreateMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateMapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.max_players_) {}

    , decltype(_impl_.instanced_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_players_, &from._impl_.max_players_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.instanced_) -
    reinterpret_cast<char*>(&_impl_.max_players_)) + sizeof(_impl_.instanced_));
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.CreateMapRequest)
}

inline void CreateMapRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.max_players_) { ::uint64_t{0u} }

    , decltype(_impl_.instanced_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateMapRequest::~CreateMapRequest() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.CreateMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateMapRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.path_.Destroy();
}

void CreateMapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.CreateMapRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  ::memset(&_impl_.max_players_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.instanced_) -
      reinterpret_cast<char*>(&_impl_.max_players_)) + sizeof(_impl_.instanced_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.CreateMapRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.CreateMapRequest.path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 max_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool instanced = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.instanced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateMapRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.CreateMapRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.CreateMapRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.CreateMapRequest.path");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 max_players = 3;
  if (this->_internal_max_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_max_players(), target);
  }

  // bool instanced = 4;
  if (this->_internal_instanced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_instanced(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.CreateMapRequest)
  return target;
}

::size_t CreateMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.CreateMapRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  // uint64 max_players = 3;
  if (this->_internal_max_players() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_players());
  }

  // bool instanced = 4;
  if (this->_internal_instanced() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateMapRequest::GetClassData() const { return &_class_data_; }


void CreateMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateMapRequest*>(&to_msg);
  auto& from = static_cast<const CreateMapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.CreateMapRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_max_players() != 0) {
    _this->_internal_set_max_players(from._internal_max_players());
  }
  if (from._internal_instanced() != 0) {
    _this->_internal_set_instanced(from._internal_instanced());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateMapRequest::CopyFrom(const CreateMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.CreateMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMapRequest::IsInitialized() const {
  return true;
}

void CreateMapRequest::InternalSwap(CreateMapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateMapRequest, _impl_.instanced_)
      + sizeof(CreateMapRequest::_impl_.instanced_)
      - PROTOBUF_FIELD_OFFSET(CreateMapRequest, _impl_.max_players_)>(
          reinterpret_cast<char*>(&_impl_.max_players_),
          reinterpret_cast<char*>(&other->_impl_.max_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[7]);
}
// ===================================================================

class Map::_Internal {
 public:
};

Map::Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Map* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.max_players_) {}

    , decltype(_impl_.instanced_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_players_, &from._impl_.max_players_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.instanced_) -
    reinterpret_cast<char*>(&_impl_.max_players_)) + sizeof(_impl_.instanced_));
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.Map)
}

inline void Map::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.max_players_) { ::uint64_t{0u} }

    , decltype(_impl_.instanced_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Map::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.path_.Destroy();
}

void Map::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.Map)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  ::memset(&_impl_.max_players_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.instanced_) -
      reinterpret_cast<char*>(&_impl_.max_players_)) + sizeof(_impl_.instanced_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.Map.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.Map.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.Map.path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 max_players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool instanced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.instanced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Map::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.Map)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.Map.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.Map.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.Map.path");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 max_players = 4;
  if (this->_internal_max_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_max_players(), target);
  }

  // bool instanced = 5;
  if (this->_internal_instanced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_instanced(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.Map)
  return target;
}

::size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.Map)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  // uint64 max_players = 4;
  if (this->_internal_max_players() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_players());
  }

  // bool instanced = 5;
  if (this->_internal_instanced() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Map::GetClassData() const { return &_class_data_; }


void Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Map*>(&to_msg);
  auto& from = static_cast<const Map&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.Map)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_max_players() != 0) {
    _this->_internal_set_max_players(from._internal_max_players());
  }
  if (from._internal_instanced() != 0) {
    _this->_internal_set_instanced(from._internal_instanced());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Map, _impl_.instanced_)
      + sizeof(Map::_impl_.instanced_)
      - PROTOBUF_FIELD_OFFSET(Map, _impl_.max_players_)>(
          reinterpret_cast<char*>(&_impl_.max_players_),
          reinterpret_cast<char*>(&other->_impl_.max_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[8]);
}
// ===================================================================

class EditMapRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EditMapRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EditMapRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sro::gamebackend::EditMapRequest, _impl_._oneof_case_);
  static const ::sro::gamebackend::MapTarget& target(const EditMapRequest* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::gamebackend::MapTarget&
EditMapRequest::_Internal::target(const EditMapRequest* msg) {
  return *msg->_impl_.target_;
}
EditMapRequest::EditMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.EditMapRequest)
}
EditMapRequest::EditMapRequest(const EditMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditMapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_path_){}
    , decltype(_impl_.optional_max_players_){}
    , decltype(_impl_.optional_instanced_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::sro::gamebackend::MapTarget(*from._impl_.target_);
  }
  clear_has_optional_name();
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  clear_has_optional_path();
  switch (from.optional_path_case()) {
    case kPath: {
      _this->_internal_set_path(from._internal_path());
      break;
    }
    case OPTIONAL_PATH_NOT_SET: {
      break;
    }
  }
  clear_has_optional_max_players();
  switch (from.optional_max_players_case()) {
    case kMaxPlayers: {
      _this->_internal_set_max_players(from._internal_max_players());
      break;
    }
    case OPTIONAL_MAX_PLAYERS_NOT_SET: {
      break;
    }
  }
  clear_has_optional_instanced();
  switch (from.optional_instanced_case()) {
    case kInstanced: {
      _this->_internal_set_instanced(from._internal_instanced());
      break;
    }
    case OPTIONAL_INSTANCED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.EditMapRequest)
}

inline void EditMapRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_path_){}
    , decltype(_impl_.optional_max_players_){}
    , decltype(_impl_.optional_instanced_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_name();
  clear_has_optional_path();
  clear_has_optional_max_players();
  clear_has_optional_instanced();
}

EditMapRequest::~EditMapRequest() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.EditMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditMapRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (has_optional_path()) {
    clear_optional_path();
  }
  if (has_optional_max_players()) {
    clear_optional_max_players();
  }
  if (has_optional_instanced()) {
    clear_optional_instanced();
  }
}

void EditMapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditMapRequest::clear_optional_name() {
// @@protoc_insertion_point(one_of_clear_start:sro.gamebackend.EditMapRequest)
  switch (optional_name_case()) {
    case kName: {
      _impl_.optional_name_.name_.Destroy();
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}

void EditMapRequest::clear_optional_path() {
// @@protoc_insertion_point(one_of_clear_start:sro.gamebackend.EditMapRequest)
  switch (optional_path_case()) {
    case kPath: {
      _impl_.optional_path_.path_.Destroy();
      break;
    }
    case OPTIONAL_PATH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_PATH_NOT_SET;
}

void EditMapRequest::clear_optional_max_players() {
// @@protoc_insertion_point(one_of_clear_start:sro.gamebackend.EditMapRequest)
  switch (optional_max_players_case()) {
    case kMaxPlayers: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAX_PLAYERS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_MAX_PLAYERS_NOT_SET;
}

void EditMapRequest::clear_optional_instanced() {
// @@protoc_insertion_point(one_of_clear_start:sro.gamebackend.EditMapRequest)
  switch (optional_instanced_case()) {
    case kInstanced: {
      // No need to clear
      break;
    }
    case OPTIONAL_INSTANCED_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[3] = OPTIONAL_INSTANCED_NOT_SET;
}


void EditMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.EditMapRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_ != nullptr);
    _impl_.target_->Clear();
  }
  clear_optional_name();
  clear_optional_path();
  clear_optional_max_players();
  clear_optional_instanced();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sro.gamebackend.MapTarget target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.EditMapRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gamebackend.EditMapRequest.path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 max_players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_max_players(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool instanced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _internal_set_instanced(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EditMapRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.EditMapRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.gamebackend.MapTarget target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (optional_name_case() == kName) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.EditMapRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string path = 3;
  if (optional_path_case() == kPath) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gamebackend.EditMapRequest.path");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 max_players = 4;
  if (optional_max_players_case() == kMaxPlayers) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_max_players(), target);
  }

  // bool instanced = 5;
  if (optional_instanced_case() == kInstanced) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_instanced(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.EditMapRequest)
  return target;
}

::size_t EditMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.EditMapRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sro.gamebackend.MapTarget target = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  switch (optional_name_case()) {
    // string name = 2;
    case kName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (optional_path_case()) {
    // string path = 3;
    case kPath: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
      break;
    }
    case OPTIONAL_PATH_NOT_SET: {
      break;
    }
  }
  switch (optional_max_players_case()) {
    // uint64 max_players = 4;
    case kMaxPlayers: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_max_players());
      break;
    }
    case OPTIONAL_MAX_PLAYERS_NOT_SET: {
      break;
    }
  }
  switch (optional_instanced_case()) {
    // bool instanced = 5;
    case kInstanced: {
      total_size += 2;
      break;
    }
    case OPTIONAL_INSTANCED_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditMapRequest::GetClassData() const { return &_class_data_; }


void EditMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditMapRequest*>(&to_msg);
  auto& from = static_cast<const EditMapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.EditMapRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_target()->::sro::gamebackend::MapTarget::MergeFrom(
        from._internal_target());
  }
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.optional_path_case()) {
    case kPath: {
      _this->_internal_set_path(from._internal_path());
      break;
    }
    case OPTIONAL_PATH_NOT_SET: {
      break;
    }
  }
  switch (from.optional_max_players_case()) {
    case kMaxPlayers: {
      _this->_internal_set_max_players(from._internal_max_players());
      break;
    }
    case OPTIONAL_MAX_PLAYERS_NOT_SET: {
      break;
    }
  }
  switch (from.optional_instanced_case()) {
    case kInstanced: {
      _this->_internal_set_instanced(from._internal_instanced());
      break;
    }
    case OPTIONAL_INSTANCED_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditMapRequest::CopyFrom(const EditMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.EditMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditMapRequest::IsInitialized() const {
  return true;
}

void EditMapRequest::InternalSwap(EditMapRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.target_, other->_impl_.target_);
  swap(_impl_.optional_name_, other->_impl_.optional_name_);
  swap(_impl_.optional_path_, other->_impl_.optional_path_);
  swap(_impl_.optional_max_players_, other->_impl_.optional_max_players_);
  swap(_impl_.optional_instanced_, other->_impl_.optional_instanced_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
  swap(_impl_._oneof_case_[3], other->_impl_._oneof_case_[3]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[9]);
}
// ===================================================================

class Maps::_Internal {
 public:
};

Maps::Maps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gamebackend.Maps)
}
Maps::Maps(const Maps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Maps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){from._impl_.maps_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.gamebackend.Maps)
}

inline void Maps::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Maps::~Maps() {
  // @@protoc_insertion_point(destructor:sro.gamebackend.Maps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Maps::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_maps()->~RepeatedPtrField();
}

void Maps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Maps::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gamebackend.Maps)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_maps()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Maps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.gamebackend.Map maps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Maps::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gamebackend.Maps)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.gamebackend.Map maps = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_maps_size()); i < n; i++) {
    const auto& repfield = this->_internal_maps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gamebackend.Maps)
  return target;
}

::size_t Maps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gamebackend.Maps)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.gamebackend.Map maps = 1;
  total_size += 1UL * this->_internal_maps_size();
  for (const auto& msg : this->_internal_maps()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Maps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Maps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Maps::GetClassData() const { return &_class_data_; }


void Maps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Maps*>(&to_msg);
  auto& from = static_cast<const Maps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gamebackend.Maps)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_maps()->MergeFrom(from._internal_maps());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Maps::CopyFrom(const Maps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gamebackend.Maps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Maps::IsInitialized() const {
  return true;
}

void Maps::InternalSwap(Maps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_maps()->InternalSwap(other->_internal_mutable_maps());
}

::PROTOBUF_NAMESPACE_ID::Metadata Maps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_getter, &descriptor_table_sro_2fgamebackend_2fservermanager_2eproto_once,
      file_level_metadata_sro_2fgamebackend_2fservermanager_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace gamebackend
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::gamebackend::DimensionTarget*
Arena::CreateMaybeMessage< ::sro::gamebackend::DimensionTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::DimensionTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::MapTarget*
Arena::CreateMaybeMessage< ::sro::gamebackend::MapTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::MapTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::CreateDimensionRequest*
Arena::CreateMaybeMessage< ::sro::gamebackend::CreateDimensionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::CreateDimensionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::DuplicateDimensionRequest*
Arena::CreateMaybeMessage< ::sro::gamebackend::DuplicateDimensionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::DuplicateDimensionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::EditDimensionRequest*
Arena::CreateMaybeMessage< ::sro::gamebackend::EditDimensionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::EditDimensionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::Dimension*
Arena::CreateMaybeMessage< ::sro::gamebackend::Dimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::Dimension >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::Dimensions*
Arena::CreateMaybeMessage< ::sro::gamebackend::Dimensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::Dimensions >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::CreateMapRequest*
Arena::CreateMaybeMessage< ::sro::gamebackend::CreateMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::CreateMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::Map*
Arena::CreateMaybeMessage< ::sro::gamebackend::Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::EditMapRequest*
Arena::CreateMaybeMessage< ::sro::gamebackend::EditMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::EditMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gamebackend::Maps*
Arena::CreateMaybeMessage< ::sro::gamebackend::Maps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gamebackend::Maps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
