// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/gamebackend/servermanager.proto

#include "sro/gamebackend/servermanager.pb.h"
#include "sro/gamebackend/servermanager.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sro {
namespace gamebackend {

static const char* ServerManagerService_method_names[] = {
  "/sro.gamebackend.ServerManagerService/CreateDimension",
  "/sro.gamebackend.ServerManagerService/DuplicateDimension",
  "/sro.gamebackend.ServerManagerService/GetDimension",
  "/sro.gamebackend.ServerManagerService/GetAllDimension",
  "/sro.gamebackend.ServerManagerService/EditDimension",
  "/sro.gamebackend.ServerManagerService/DeleteDimension",
  "/sro.gamebackend.ServerManagerService/CreateMap",
  "/sro.gamebackend.ServerManagerService/GetMap",
  "/sro.gamebackend.ServerManagerService/GetAllMaps",
  "/sro.gamebackend.ServerManagerService/EditMap",
  "/sro.gamebackend.ServerManagerService/DeleteMap",
};

std::unique_ptr< ServerManagerService::Stub> ServerManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerManagerService::Stub> stub(new ServerManagerService::Stub(channel, options));
  return stub;
}

ServerManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateDimension_(ServerManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DuplicateDimension_(ServerManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDimension_(ServerManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllDimension_(ServerManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditDimension_(ServerManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDimension_(ServerManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateMap_(ServerManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMap_(ServerManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllMaps_(ServerManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditMap_(ServerManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMap_(ServerManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ServerManagerService::Stub::CreateDimension(::grpc::ClientContext* context, const ::sro::gamebackend::CreateDimensionRequest& request, ::sro::gamebackend::Dimension* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gamebackend::CreateDimensionRequest, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDimension_, context, request, response);
}

void ServerManagerService::Stub::async::CreateDimension(::grpc::ClientContext* context, const ::sro::gamebackend::CreateDimensionRequest* request, ::sro::gamebackend::Dimension* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gamebackend::CreateDimensionRequest, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDimension_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::CreateDimension(::grpc::ClientContext* context, const ::sro::gamebackend::CreateDimensionRequest* request, ::sro::gamebackend::Dimension* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimension>* ServerManagerService::Stub::PrepareAsyncCreateDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::CreateDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gamebackend::Dimension, ::sro::gamebackend::CreateDimensionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimension>* ServerManagerService::Stub::AsyncCreateDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::CreateDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::DuplicateDimension(::grpc::ClientContext* context, const ::sro::gamebackend::DuplicateDimensionRequest& request, ::sro::gamebackend::Dimension* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gamebackend::DuplicateDimensionRequest, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DuplicateDimension_, context, request, response);
}

void ServerManagerService::Stub::async::DuplicateDimension(::grpc::ClientContext* context, const ::sro::gamebackend::DuplicateDimensionRequest* request, ::sro::gamebackend::Dimension* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gamebackend::DuplicateDimensionRequest, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DuplicateDimension_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::DuplicateDimension(::grpc::ClientContext* context, const ::sro::gamebackend::DuplicateDimensionRequest* request, ::sro::gamebackend::Dimension* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DuplicateDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimension>* ServerManagerService::Stub::PrepareAsyncDuplicateDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::DuplicateDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gamebackend::Dimension, ::sro::gamebackend::DuplicateDimensionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DuplicateDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimension>* ServerManagerService::Stub::AsyncDuplicateDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::DuplicateDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDuplicateDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::GetDimension(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget& request, ::sro::gamebackend::Dimension* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gamebackend::DimensionTarget, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDimension_, context, request, response);
}

void ServerManagerService::Stub::async::GetDimension(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget* request, ::sro::gamebackend::Dimension* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gamebackend::DimensionTarget, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDimension_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::GetDimension(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget* request, ::sro::gamebackend::Dimension* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimension>* ServerManagerService::Stub::PrepareAsyncGetDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gamebackend::Dimension, ::sro::gamebackend::DimensionTarget, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimension>* ServerManagerService::Stub::AsyncGetDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::GetAllDimension(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::gamebackend::Dimensions* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::gamebackend::Dimensions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllDimension_, context, request, response);
}

void ServerManagerService::Stub::async::GetAllDimension(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gamebackend::Dimensions* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::gamebackend::Dimensions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllDimension_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::GetAllDimension(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gamebackend::Dimensions* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimensions>* ServerManagerService::Stub::PrepareAsyncGetAllDimensionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gamebackend::Dimensions, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimensions>* ServerManagerService::Stub::AsyncGetAllDimensionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::EditDimension(::grpc::ClientContext* context, const ::sro::gamebackend::EditDimensionRequest& request, ::sro::gamebackend::Dimension* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gamebackend::EditDimensionRequest, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditDimension_, context, request, response);
}

void ServerManagerService::Stub::async::EditDimension(::grpc::ClientContext* context, const ::sro::gamebackend::EditDimensionRequest* request, ::sro::gamebackend::Dimension* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gamebackend::EditDimensionRequest, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditDimension_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::EditDimension(::grpc::ClientContext* context, const ::sro::gamebackend::EditDimensionRequest* request, ::sro::gamebackend::Dimension* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimension>* ServerManagerService::Stub::PrepareAsyncEditDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::EditDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gamebackend::Dimension, ::sro::gamebackend::EditDimensionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Dimension>* ServerManagerService::Stub::AsyncEditDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::EditDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::DeleteDimension(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gamebackend::DimensionTarget, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDimension_, context, request, response);
}

void ServerManagerService::Stub::async::DeleteDimension(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gamebackend::DimensionTarget, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDimension_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::DeleteDimension(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ServerManagerService::Stub::PrepareAsyncDeleteDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::gamebackend::DimensionTarget, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ServerManagerService::Stub::AsyncDeleteDimensionRaw(::grpc::ClientContext* context, const ::sro::gamebackend::DimensionTarget& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::CreateMap(::grpc::ClientContext* context, const ::sro::gamebackend::CreateMapRequest& request, ::sro::gamebackend::Map* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gamebackend::CreateMapRequest, ::sro::gamebackend::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateMap_, context, request, response);
}

void ServerManagerService::Stub::async::CreateMap(::grpc::ClientContext* context, const ::sro::gamebackend::CreateMapRequest* request, ::sro::gamebackend::Map* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gamebackend::CreateMapRequest, ::sro::gamebackend::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMap_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::CreateMap(::grpc::ClientContext* context, const ::sro::gamebackend::CreateMapRequest* request, ::sro::gamebackend::Map* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Map>* ServerManagerService::Stub::PrepareAsyncCreateMapRaw(::grpc::ClientContext* context, const ::sro::gamebackend::CreateMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gamebackend::Map, ::sro::gamebackend::CreateMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Map>* ServerManagerService::Stub::AsyncCreateMapRaw(::grpc::ClientContext* context, const ::sro::gamebackend::CreateMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::GetMap(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget& request, ::sro::gamebackend::Map* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gamebackend::MapTarget, ::sro::gamebackend::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMap_, context, request, response);
}

void ServerManagerService::Stub::async::GetMap(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget* request, ::sro::gamebackend::Map* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gamebackend::MapTarget, ::sro::gamebackend::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::GetMap(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget* request, ::sro::gamebackend::Map* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Map>* ServerManagerService::Stub::PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gamebackend::Map, ::sro::gamebackend::MapTarget, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Map>* ServerManagerService::Stub::AsyncGetMapRaw(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::GetAllMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::gamebackend::Maps* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::gamebackend::Maps, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllMaps_, context, request, response);
}

void ServerManagerService::Stub::async::GetAllMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gamebackend::Maps* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::gamebackend::Maps, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllMaps_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::GetAllMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gamebackend::Maps* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllMaps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Maps>* ServerManagerService::Stub::PrepareAsyncGetAllMapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gamebackend::Maps, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllMaps_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Maps>* ServerManagerService::Stub::AsyncGetAllMapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllMapsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::EditMap(::grpc::ClientContext* context, const ::sro::gamebackend::EditMapRequest& request, ::sro::gamebackend::Map* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gamebackend::EditMapRequest, ::sro::gamebackend::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditMap_, context, request, response);
}

void ServerManagerService::Stub::async::EditMap(::grpc::ClientContext* context, const ::sro::gamebackend::EditMapRequest* request, ::sro::gamebackend::Map* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gamebackend::EditMapRequest, ::sro::gamebackend::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditMap_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::EditMap(::grpc::ClientContext* context, const ::sro::gamebackend::EditMapRequest* request, ::sro::gamebackend::Map* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Map>* ServerManagerService::Stub::PrepareAsyncEditMapRaw(::grpc::ClientContext* context, const ::sro::gamebackend::EditMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gamebackend::Map, ::sro::gamebackend::EditMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gamebackend::Map>* ServerManagerService::Stub::AsyncEditMapRaw(::grpc::ClientContext* context, const ::sro::gamebackend::EditMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerManagerService::Stub::DeleteMap(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gamebackend::MapTarget, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteMap_, context, request, response);
}

void ServerManagerService::Stub::async::DeleteMap(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gamebackend::MapTarget, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMap_, context, request, response, std::move(f));
}

void ServerManagerService::Stub::async::DeleteMap(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ServerManagerService::Stub::PrepareAsyncDeleteMapRaw(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::gamebackend::MapTarget, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ServerManagerService::Stub::AsyncDeleteMapRaw(::grpc::ClientContext* context, const ::sro::gamebackend::MapTarget& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

ServerManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::sro::gamebackend::CreateDimensionRequest, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gamebackend::CreateDimensionRequest* req,
             ::sro::gamebackend::Dimension* resp) {
               return service->CreateDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::sro::gamebackend::DuplicateDimensionRequest, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gamebackend::DuplicateDimensionRequest* req,
             ::sro::gamebackend::Dimension* resp) {
               return service->DuplicateDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::sro::gamebackend::DimensionTarget, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gamebackend::DimensionTarget* req,
             ::sro::gamebackend::Dimension* resp) {
               return service->GetDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::google::protobuf::Empty, ::sro::gamebackend::Dimensions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::gamebackend::Dimensions* resp) {
               return service->GetAllDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::sro::gamebackend::EditDimensionRequest, ::sro::gamebackend::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gamebackend::EditDimensionRequest* req,
             ::sro::gamebackend::Dimension* resp) {
               return service->EditDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::sro::gamebackend::DimensionTarget, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gamebackend::DimensionTarget* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::sro::gamebackend::CreateMapRequest, ::sro::gamebackend::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gamebackend::CreateMapRequest* req,
             ::sro::gamebackend::Map* resp) {
               return service->CreateMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::sro::gamebackend::MapTarget, ::sro::gamebackend::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gamebackend::MapTarget* req,
             ::sro::gamebackend::Map* resp) {
               return service->GetMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::google::protobuf::Empty, ::sro::gamebackend::Maps, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::gamebackend::Maps* resp) {
               return service->GetAllMaps(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::sro::gamebackend::EditMapRequest, ::sro::gamebackend::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gamebackend::EditMapRequest* req,
             ::sro::gamebackend::Map* resp) {
               return service->EditMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerManagerService::Service, ::sro::gamebackend::MapTarget, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gamebackend::MapTarget* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteMap(ctx, req, resp);
             }, this)));
}

ServerManagerService::Service::~Service() {
}

::grpc::Status ServerManagerService::Service::CreateDimension(::grpc::ServerContext* context, const ::sro::gamebackend::CreateDimensionRequest* request, ::sro::gamebackend::Dimension* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::DuplicateDimension(::grpc::ServerContext* context, const ::sro::gamebackend::DuplicateDimensionRequest* request, ::sro::gamebackend::Dimension* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::GetDimension(::grpc::ServerContext* context, const ::sro::gamebackend::DimensionTarget* request, ::sro::gamebackend::Dimension* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::GetAllDimension(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::gamebackend::Dimensions* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::EditDimension(::grpc::ServerContext* context, const ::sro::gamebackend::EditDimensionRequest* request, ::sro::gamebackend::Dimension* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::DeleteDimension(::grpc::ServerContext* context, const ::sro::gamebackend::DimensionTarget* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::CreateMap(::grpc::ServerContext* context, const ::sro::gamebackend::CreateMapRequest* request, ::sro::gamebackend::Map* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::GetMap(::grpc::ServerContext* context, const ::sro::gamebackend::MapTarget* request, ::sro::gamebackend::Map* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::GetAllMaps(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::gamebackend::Maps* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::EditMap(::grpc::ServerContext* context, const ::sro::gamebackend::EditMapRequest* request, ::sro::gamebackend::Map* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerManagerService::Service::DeleteMap(::grpc::ServerContext* context, const ::sro::gamebackend::MapTarget* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace gamebackend

